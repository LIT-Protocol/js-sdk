const fs = require('fs');
const path = require('path');

const esbuild = require('esbuild');

const ensureDirectoryExistence = (filePath) => {
  const dirname = path.dirname(filePath);
  if (!fs.existsSync(dirname)) {
    fs.mkdirSync(dirname, { recursive: true });
  }
};

const wrapIIFEInStringPlugin = {
  name: 'wrap-iife-in-string',
  setup(build) {
    // Ensure write is set to false so our plugin will always receive outputFiles
    build.initialOptions.write = false;

    build.onEnd((result) => {
      if (result.errors.length > 0) {
        console.error('Build failed with errors:', result.errors);
        return;
      }

      result.outputFiles.forEach((outputFile) => {
        let content = outputFile.text;
        // Use JSON.stringify to safely encode the content
        const wrappedContent = `/**
 * DO NOT EDIT THIS FILE. IT IS GENERATED ON BUILD. RUN \`yarn generate-lit-actions\` IN THE ROOT DIRECTORY TO UPDATE THIS FILE.
 * @type {string}
 */
const code = ${JSON.stringify(content)};
module.exports = {
  code,
};
`;

        // Ensure the output directory exists
        const outputPath = path.resolve(outputFile.path);
        ensureDirectoryExistence(outputPath);

        // Write the modified content back to the output file
        fs.writeFileSync(outputPath, wrappedContent);
      });
    });
  },
};

(async () => {
  try {
    await esbuild
      .build({
        entryPoints: [
          './src/lib/self-executing-actions/solana/signTransactionWithEncryptedSolanaKey.ts',
          './src/lib/self-executing-actions/solana/signMessageWithEncryptedSolanaKey.ts',
          './src/lib/self-executing-actions/solana/generateEncryptedSolanaPrivateKey.ts',
          './src/lib/self-executing-actions/ethereum/signTransactionWithEncryptedEthereumKey.ts',
          './src/lib/self-executing-actions/ethereum/signMessageWithEncryptedEthereumKey.ts',
          './src/lib/self-executing-actions/ethereum/generateEncryptedEthereumPrivateKey.ts',
          './src/lib/self-executing-actions/common/exportPrivateKey.ts',
          './src/lib/self-executing-actions/common/batchGenerateEncryptedKeys.ts',
          './src/lib/self-executing-actions/delegated/decryptWrappedKeyForDelegatee.ts',
        ],
        bundle: true,
        minify: true,
        sourcemap: false,
        treeShaking: true,
        outdir: './src/generated/',
        inject: ['./buffer.shim.js'],
        external: ['ethers'],
        plugins: [wrapIIFEInStringPlugin],
        platform: 'browser',
      })
      .then((result) => {
        result.outputFiles.forEach((file) => {
          const bytes = file.text.length;
          const mbInBinary = (bytes / (1024 * 1024)).toFixed(4);
          const mbInDecimal = (bytes / 1_000_000).toFixed(4);

          console.log(
            `✅ ${file.path
              .split('/')
              .pop()}\n- ${mbInDecimal} MB (in decimal)\n- ${mbInBinary} MB (in binary)`
          );
        });
      });
    console.log('✅ Lit actions built successfully');
  } catch (e) {
    console.error('❌ Error building lit actions: ', e);
    process.exit(1);
  }
})();
