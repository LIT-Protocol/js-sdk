/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface DomainWaleltRegistryInterface extends utils.Interface {
  functions: {
    "ADMIN_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "contractResolver()": FunctionFragment;
    "env()": FunctionFragment;
    "getDomainIdByTokenId(uint256)": FunctionFragment;
    "getDomainTokenIdByUri(bytes)": FunctionFragment;
    "getDomainUri(uint256)": FunctionFragment;
    "getExpiration(uint256)": FunctionFragment;
    "getPkpTokenId(uint64)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasExpired(uint256)": FunctionFragment;
    "hasOwner(uint256)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isOwner(uint256)": FunctionFragment;
    "isRouted(uint256)": FunctionFragment;
    "registerDomain(bytes,bytes,uint256,uint256,string[])": FunctionFragment;
    "registerDomainAndMintNext(bytes,bytes,uint256,uint256[],bytes[],bytes[],uint256[][],string[])": FunctionFragment;
    "registerPKP(uint64,uint256)": FunctionFragment;
    "removeDomain(uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeDomain(uint256)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setPKPMetadata(uint256,string[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "contractResolver"
      | "env"
      | "getDomainIdByTokenId"
      | "getDomainTokenIdByUri"
      | "getDomainUri"
      | "getExpiration"
      | "getPkpTokenId"
      | "getRoleAdmin"
      | "grantRole"
      | "hasExpired"
      | "hasOwner"
      | "hasRole"
      | "isOwner"
      | "isRouted"
      | "registerDomain"
      | "registerDomainAndMintNext"
      | "registerPKP"
      | "removeDomain"
      | "renounceRole"
      | "revokeDomain"
      | "revokeRole"
      | "setAdmin"
      | "setPKPMetadata"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractResolver",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "env", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDomainIdByTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainTokenIdByUri",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainUri",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpiration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPkpTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasExpired",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isRouted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDomain",
    values: [BytesLike, BytesLike, BigNumberish, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDomainAndMintNext",
    values: [
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish[],
      BytesLike[],
      BytesLike[],
      BigNumberish[][],
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPKP",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDomain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeDomain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPKPMetadata",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "env", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDomainIdByTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDomainTokenIdByUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDomainUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPkpTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasExpired", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isRouted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDomainAndMintNext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPKP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPKPMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface DomainWaleltRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DomainWaleltRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    contractResolver(overrides?: CallOverrides): Promise<[string]>;

    env(overrides?: CallOverrides): Promise<[number]>;

    getDomainIdByTokenId(
      pkpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDomainTokenIdByUri(
      uri: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDomainUri(
      pkpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getExpiration(
      pkpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPkpTokenId(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasExpired(
      pkpTokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasOwner(
      pkpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOwner(
      pkpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRouted(
      pkpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerDomain(
      userId: BytesLike,
      uri: BytesLike,
      ttl: BigNumberish,
      pkpTokenId: BigNumberish,
      nftMetadata: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    registerDomainAndMintNext(
      userId: BytesLike,
      uri: BytesLike,
      ttl: BigNumberish,
      permittedAuthMethodTypes: BigNumberish[],
      permittedAuthMethodIds: BytesLike[],
      permittedAuthMethodPubkeys: BytesLike[],
      permittedAuthMethodScopes: BigNumberish[][],
      nftMetadata: string[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    registerPKP(
      id: BigNumberish,
      pkpTokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeDomain(
      pkpTokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeDomain(
      pkpTokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAdmin(
      adminAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPKPMetadata(
      pkpTokenId: BigNumberish,
      nftMetadata: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  contractResolver(overrides?: CallOverrides): Promise<string>;

  env(overrides?: CallOverrides): Promise<number>;

  getDomainIdByTokenId(
    pkpTokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDomainTokenIdByUri(
    uri: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDomainUri(
    pkpTokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getExpiration(
    pkpTokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPkpTokenId(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasExpired(
    pkpTokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasOwner(
    pkpTokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOwner(
    pkpTokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRouted(
    pkpTokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerDomain(
    userId: BytesLike,
    uri: BytesLike,
    ttl: BigNumberish,
    pkpTokenId: BigNumberish,
    nftMetadata: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  registerDomainAndMintNext(
    userId: BytesLike,
    uri: BytesLike,
    ttl: BigNumberish,
    permittedAuthMethodTypes: BigNumberish[],
    permittedAuthMethodIds: BytesLike[],
    permittedAuthMethodPubkeys: BytesLike[],
    permittedAuthMethodScopes: BigNumberish[][],
    nftMetadata: string[],
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  registerPKP(
    id: BigNumberish,
    pkpTokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeDomain(
    pkpTokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeDomain(
    pkpTokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAdmin(
    adminAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPKPMetadata(
    pkpTokenId: BigNumberish,
    nftMetadata: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    contractResolver(overrides?: CallOverrides): Promise<string>;

    env(overrides?: CallOverrides): Promise<number>;

    getDomainIdByTokenId(
      pkpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDomainTokenIdByUri(
      uri: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDomainUri(
      pkpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getExpiration(
      pkpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPkpTokenId(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasExpired(
      pkpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasOwner(
      pkpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwner(
      pkpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRouted(
      pkpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerDomain(
      userId: BytesLike,
      uri: BytesLike,
      ttl: BigNumberish,
      pkpTokenId: BigNumberish,
      nftMetadata: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerDomainAndMintNext(
      userId: BytesLike,
      uri: BytesLike,
      ttl: BigNumberish,
      permittedAuthMethodTypes: BigNumberish[],
      permittedAuthMethodIds: BytesLike[],
      permittedAuthMethodPubkeys: BytesLike[],
      permittedAuthMethodScopes: BigNumberish[][],
      nftMetadata: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerPKP(
      id: BigNumberish,
      pkpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeDomain(
      pkpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeDomain(
      pkpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(adminAddress: string, overrides?: CallOverrides): Promise<void>;

    setPKPMetadata(
      pkpTokenId: BigNumberish,
      nftMetadata: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    contractResolver(overrides?: CallOverrides): Promise<BigNumber>;

    env(overrides?: CallOverrides): Promise<BigNumber>;

    getDomainIdByTokenId(
      pkpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDomainTokenIdByUri(
      uri: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDomainUri(
      pkpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExpiration(
      pkpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPkpTokenId(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasExpired(
      pkpTokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasOwner(
      pkpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(
      pkpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRouted(
      pkpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerDomain(
      userId: BytesLike,
      uri: BytesLike,
      ttl: BigNumberish,
      pkpTokenId: BigNumberish,
      nftMetadata: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    registerDomainAndMintNext(
      userId: BytesLike,
      uri: BytesLike,
      ttl: BigNumberish,
      permittedAuthMethodTypes: BigNumberish[],
      permittedAuthMethodIds: BytesLike[],
      permittedAuthMethodPubkeys: BytesLike[],
      permittedAuthMethodScopes: BigNumberish[][],
      nftMetadata: string[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    registerPKP(
      id: BigNumberish,
      pkpTokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeDomain(
      pkpTokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeDomain(
      pkpTokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAdmin(
      adminAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPKPMetadata(
      pkpTokenId: BigNumberish,
      nftMetadata: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractResolver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    env(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDomainIdByTokenId(
      pkpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDomainTokenIdByUri(
      uri: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDomainUri(
      pkpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExpiration(
      pkpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPkpTokenId(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasExpired(
      pkpTokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasOwner(
      pkpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(
      pkpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRouted(
      pkpTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerDomain(
      userId: BytesLike,
      uri: BytesLike,
      ttl: BigNumberish,
      pkpTokenId: BigNumberish,
      nftMetadata: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    registerDomainAndMintNext(
      userId: BytesLike,
      uri: BytesLike,
      ttl: BigNumberish,
      permittedAuthMethodTypes: BigNumberish[],
      permittedAuthMethodIds: BytesLike[],
      permittedAuthMethodPubkeys: BytesLike[],
      permittedAuthMethodScopes: BigNumberish[][],
      nftMetadata: string[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    registerPKP(
      id: BigNumberish,
      pkpTokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeDomain(
      pkpTokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeDomain(
      pkpTokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      adminAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPKPMetadata(
      pkpTokenId: BigNumberish,
      nftMetadata: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
