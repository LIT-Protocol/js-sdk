/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IDiamond {
  export type FacetCutStruct = {
    facetAddress: string;
    action: BigNumberish;
    functionSelectors: BytesLike[];
  };

  export type FacetCutStructOutput = [string, number, string[]] & {
    facetAddress: string;
    action: number;
    functionSelectors: string[];
  };
}

export declare namespace IDiamondLoupe {
  export type FacetStruct = {
    facetAddress: string;
    functionSelectors: BytesLike[];
  };

  export type FacetStructOutput = [string, string[]] & {
    facetAddress: string;
    functionSelectors: string[];
  };
}

export declare namespace IPubkeyRouter {
  export type RootKeyStruct = { pubkey: BytesLike; keyType: BigNumberish };

  export type RootKeyStructOutput = [string, BigNumber] & {
    pubkey: string;
    keyType: BigNumber;
  };

  export type SignatureStruct = { r: BytesLike; s: BytesLike; v: BigNumberish };

  export type SignatureStructOutput = [string, string, number] & {
    r: string;
    s: string;
    v: number;
  };
}

export declare namespace LibPubkeyRouterStorage {
  export type PubkeyRoutingDataStruct = {
    pubkey: BytesLike;
    keyType: BigNumberish;
    derivedKeyId: BytesLike;
  };

  export type PubkeyRoutingDataStructOutput = [string, BigNumber, string] & {
    pubkey: string;
    keyType: BigNumber;
    derivedKeyId: string;
  };
}

export interface PubkeyRouterInterface extends utils.Interface {
  functions: {
    "diamondCut((address,uint8,bytes4[])[],address,bytes)": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "owner()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "checkNodeSignatures((bytes32,bytes32,uint8)[],bytes,address)": FunctionFragment;
    "deriveEthAddressFromPubkey(bytes)": FunctionFragment;
    "ethAddressToPkpId(address)": FunctionFragment;
    "getDerivedPubkey(address,bytes32)": FunctionFragment;
    "getEthAddress(uint256)": FunctionFragment;
    "getPkpNftAddress()": FunctionFragment;
    "getPubkey(uint256)": FunctionFragment;
    "getRootKeys(address)": FunctionFragment;
    "getRoutingData(uint256)": FunctionFragment;
    "isRouted(uint256)": FunctionFragment;
    "pubkeys(uint256)": FunctionFragment;
    "setContractResolver(address)": FunctionFragment;
    "setRoutingData(uint256,bytes,address,uint256,bytes32)": FunctionFragment;
    "setRoutingDataAsAdmin(uint256,bytes,address,uint256,bytes32)": FunctionFragment;
    "voteForRootKeys(address,(bytes,uint256)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "diamondCut"
      | "facetAddress"
      | "facetAddresses"
      | "facetFunctionSelectors"
      | "facets"
      | "supportsInterface"
      | "owner"
      | "transferOwnership"
      | "checkNodeSignatures"
      | "deriveEthAddressFromPubkey"
      | "ethAddressToPkpId"
      | "getDerivedPubkey"
      | "getEthAddress"
      | "getPkpNftAddress"
      | "getPubkey"
      | "getRootKeys"
      | "getRoutingData"
      | "isRouted"
      | "pubkeys"
      | "setContractResolver"
      | "setRoutingData"
      | "setRoutingDataAsAdmin"
      | "voteForRootKeys"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "diamondCut",
    values: [IDiamond.FacetCutStruct[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkNodeSignatures",
    values: [IPubkeyRouter.SignatureStruct[], BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deriveEthAddressFromPubkey",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ethAddressToPkpId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDerivedPubkey",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPkpNftAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPubkey",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getRootKeys", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getRoutingData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isRouted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pubkeys",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractResolver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoutingData",
    values: [BigNumberish, BytesLike, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoutingDataAsAdmin",
    values: [BigNumberish, BytesLike, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "voteForRootKeys",
    values: [string, IPubkeyRouter.RootKeyStruct[]]
  ): string;

  decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkNodeSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deriveEthAddressFromPubkey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethAddressToPkpId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDerivedPubkey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPkpNftAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPubkey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRootKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoutingData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isRouted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pubkeys", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContractResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoutingData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoutingDataAsAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteForRootKeys",
    data: BytesLike
  ): Result;

  events: {
    "DiamondCut((address,uint8,bytes4[])[],address,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ContractResolverAddressSet(address)": EventFragment;
    "PubkeyRoutingDataSet(uint256,bytes,address,uint256,bytes32)": EventFragment;
    "RootKeySet(address,(bytes,uint256))": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DiamondCut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractResolverAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PubkeyRoutingDataSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RootKeySet"): EventFragment;
}

export interface DiamondCutEventObject {
  _diamondCut: IDiamond.FacetCutStructOutput[];
  _init: string;
  _calldata: string;
}
export type DiamondCutEvent = TypedEvent<
  [IDiamond.FacetCutStructOutput[], string, string],
  DiamondCutEventObject
>;

export type DiamondCutEventFilter = TypedEventFilter<DiamondCutEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ContractResolverAddressSetEventObject {
  newResolverAddress: string;
}
export type ContractResolverAddressSetEvent = TypedEvent<
  [string],
  ContractResolverAddressSetEventObject
>;

export type ContractResolverAddressSetEventFilter =
  TypedEventFilter<ContractResolverAddressSetEvent>;

export interface PubkeyRoutingDataSetEventObject {
  tokenId: BigNumber;
  pubkey: string;
  stakingContract: string;
  keyType: BigNumber;
  derivedKeyId: string;
}
export type PubkeyRoutingDataSetEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string],
  PubkeyRoutingDataSetEventObject
>;

export type PubkeyRoutingDataSetEventFilter =
  TypedEventFilter<PubkeyRoutingDataSetEvent>;

export interface RootKeySetEventObject {
  stakingContract: string;
  rootKey: IPubkeyRouter.RootKeyStructOutput;
}
export type RootKeySetEvent = TypedEvent<
  [string, IPubkeyRouter.RootKeyStructOutput],
  RootKeySetEventObject
>;

export type RootKeySetEventFilter = TypedEventFilter<RootKeySetEvent>;

export interface PubkeyRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PubkeyRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    diamondCut(
      _diamondCut: IDiamond.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { facetAddress_: string }>;

    facetAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetAddresses_: string[] }>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { _facetFunctionSelectors: string[] }>;

    facets(
      overrides?: CallOverrides
    ): Promise<
      [IDiamondLoupe.FacetStructOutput[]] & {
        facets_: IDiamondLoupe.FacetStructOutput[];
      }
    >;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string] & { owner_: string }>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    checkNodeSignatures(
      signatures: IPubkeyRouter.SignatureStruct[],
      signedMessage: BytesLike,
      stakingContractAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    deriveEthAddressFromPubkey(
      pubkey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ethAddressToPkpId(
      ethAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDerivedPubkey(
      stakingContract: string,
      derivedKeyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getEthAddress(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPkpNftAddress(overrides?: CallOverrides): Promise<[string]>;

    getPubkey(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRootKeys(
      stakingContract: string,
      overrides?: CallOverrides
    ): Promise<[IPubkeyRouter.RootKeyStructOutput[]]>;

    getRoutingData(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[LibPubkeyRouterStorage.PubkeyRoutingDataStructOutput]>;

    isRouted(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pubkeys(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[LibPubkeyRouterStorage.PubkeyRoutingDataStructOutput]>;

    setContractResolver(
      newResolverAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRoutingData(
      tokenId: BigNumberish,
      pubkey: BytesLike,
      stakingContractAddress: string,
      keyType: BigNumberish,
      derivedKeyId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRoutingDataAsAdmin(
      tokenId: BigNumberish,
      pubkey: BytesLike,
      stakingContract: string,
      keyType: BigNumberish,
      derivedKeyId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    voteForRootKeys(
      stakingContractAddress: string,
      newRootKeys: IPubkeyRouter.RootKeyStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  diamondCut(
    _diamondCut: IDiamond.FacetCutStruct[],
    _init: string,
    _calldata: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  facetAddress(
    _functionSelector: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    _facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  facets(overrides?: CallOverrides): Promise<IDiamondLoupe.FacetStructOutput[]>;

  supportsInterface(
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  checkNodeSignatures(
    signatures: IPubkeyRouter.SignatureStruct[],
    signedMessage: BytesLike,
    stakingContractAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  deriveEthAddressFromPubkey(
    pubkey: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  ethAddressToPkpId(
    ethAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDerivedPubkey(
    stakingContract: string,
    derivedKeyId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getEthAddress(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPkpNftAddress(overrides?: CallOverrides): Promise<string>;

  getPubkey(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getRootKeys(
    stakingContract: string,
    overrides?: CallOverrides
  ): Promise<IPubkeyRouter.RootKeyStructOutput[]>;

  getRoutingData(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<LibPubkeyRouterStorage.PubkeyRoutingDataStructOutput>;

  isRouted(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  pubkeys(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<LibPubkeyRouterStorage.PubkeyRoutingDataStructOutput>;

  setContractResolver(
    newResolverAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRoutingData(
    tokenId: BigNumberish,
    pubkey: BytesLike,
    stakingContractAddress: string,
    keyType: BigNumberish,
    derivedKeyId: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRoutingDataAsAdmin(
    tokenId: BigNumberish,
    pubkey: BytesLike,
    stakingContract: string,
    keyType: BigNumberish,
    derivedKeyId: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  voteForRootKeys(
    stakingContractAddress: string,
    newRootKeys: IPubkeyRouter.RootKeyStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    diamondCut(
      _diamondCut: IDiamond.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    facets(
      overrides?: CallOverrides
    ): Promise<IDiamondLoupe.FacetStructOutput[]>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    checkNodeSignatures(
      signatures: IPubkeyRouter.SignatureStruct[],
      signedMessage: BytesLike,
      stakingContractAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deriveEthAddressFromPubkey(
      pubkey: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    ethAddressToPkpId(
      ethAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDerivedPubkey(
      stakingContract: string,
      derivedKeyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getEthAddress(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPkpNftAddress(overrides?: CallOverrides): Promise<string>;

    getPubkey(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRootKeys(
      stakingContract: string,
      overrides?: CallOverrides
    ): Promise<IPubkeyRouter.RootKeyStructOutput[]>;

    getRoutingData(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<LibPubkeyRouterStorage.PubkeyRoutingDataStructOutput>;

    isRouted(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pubkeys(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<LibPubkeyRouterStorage.PubkeyRoutingDataStructOutput>;

    setContractResolver(
      newResolverAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoutingData(
      tokenId: BigNumberish,
      pubkey: BytesLike,
      stakingContractAddress: string,
      keyType: BigNumberish,
      derivedKeyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoutingDataAsAdmin(
      tokenId: BigNumberish,
      pubkey: BytesLike,
      stakingContract: string,
      keyType: BigNumberish,
      derivedKeyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    voteForRootKeys(
      stakingContractAddress: string,
      newRootKeys: IPubkeyRouter.RootKeyStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DiamondCut((address,uint8,bytes4[])[],address,bytes)"(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): DiamondCutEventFilter;
    DiamondCut(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): DiamondCutEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ContractResolverAddressSet(address)"(
      newResolverAddress?: null
    ): ContractResolverAddressSetEventFilter;
    ContractResolverAddressSet(
      newResolverAddress?: null
    ): ContractResolverAddressSetEventFilter;

    "PubkeyRoutingDataSet(uint256,bytes,address,uint256,bytes32)"(
      tokenId?: BigNumberish | null,
      pubkey?: null,
      stakingContract?: null,
      keyType?: null,
      derivedKeyId?: null
    ): PubkeyRoutingDataSetEventFilter;
    PubkeyRoutingDataSet(
      tokenId?: BigNumberish | null,
      pubkey?: null,
      stakingContract?: null,
      keyType?: null,
      derivedKeyId?: null
    ): PubkeyRoutingDataSetEventFilter;

    "RootKeySet(address,(bytes,uint256))"(
      stakingContract?: null,
      rootKey?: null
    ): RootKeySetEventFilter;
    RootKeySet(stakingContract?: null, rootKey?: null): RootKeySetEventFilter;
  };

  estimateGas: {
    diamondCut(
      _diamondCut: IDiamond.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    checkNodeSignatures(
      signatures: IPubkeyRouter.SignatureStruct[],
      signedMessage: BytesLike,
      stakingContractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deriveEthAddressFromPubkey(
      pubkey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ethAddressToPkpId(
      ethAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDerivedPubkey(
      stakingContract: string,
      derivedKeyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEthAddress(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPkpNftAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getPubkey(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRootKeys(
      stakingContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoutingData(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRouted(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pubkeys(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setContractResolver(
      newResolverAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRoutingData(
      tokenId: BigNumberish,
      pubkey: BytesLike,
      stakingContractAddress: string,
      keyType: BigNumberish,
      derivedKeyId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRoutingDataAsAdmin(
      tokenId: BigNumberish,
      pubkey: BytesLike,
      stakingContract: string,
      keyType: BigNumberish,
      derivedKeyId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    voteForRootKeys(
      stakingContractAddress: string,
      newRootKeys: IPubkeyRouter.RootKeyStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    diamondCut(
      _diamondCut: IDiamond.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    checkNodeSignatures(
      signatures: IPubkeyRouter.SignatureStruct[],
      signedMessage: BytesLike,
      stakingContractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deriveEthAddressFromPubkey(
      pubkey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ethAddressToPkpId(
      ethAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDerivedPubkey(
      stakingContract: string,
      derivedKeyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEthAddress(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPkpNftAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPubkey(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRootKeys(
      stakingContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoutingData(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRouted(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pubkeys(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setContractResolver(
      newResolverAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRoutingData(
      tokenId: BigNumberish,
      pubkey: BytesLike,
      stakingContractAddress: string,
      keyType: BigNumberish,
      derivedKeyId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRoutingDataAsAdmin(
      tokenId: BigNumberish,
      pubkey: BytesLike,
      stakingContract: string,
      keyType: BigNumberish,
      derivedKeyId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    voteForRootKeys(
      stakingContractAddress: string,
      newRootKeys: IPubkeyRouter.RootKeyStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
