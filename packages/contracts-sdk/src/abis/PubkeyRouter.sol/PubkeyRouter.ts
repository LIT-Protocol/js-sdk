/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IPubkeyRouter {
  export type RootKeyStruct = { pubkey: BytesLike; keyType: BigNumberish };

  export type RootKeyStructOutput = [string, BigNumber] & {
    pubkey: string;
    keyType: BigNumber;
  };

  export type SignatureStruct = { r: BytesLike; s: BytesLike; v: BigNumberish };

  export type SignatureStructOutput = [string, string, number] & {
    r: string;
    s: string;
    v: number;
  };
}

export declare namespace PubkeyRouter {
  export type PubkeyRoutingDataStruct = {
    pubkey: BytesLike;
    keyType: BigNumberish;
    derivedKeyId: BytesLike;
  };

  export type PubkeyRoutingDataStructOutput = [string, BigNumber, string] & {
    pubkey: string;
    keyType: BigNumber;
    derivedKeyId: string;
  };
}

export interface PubkeyRouterInterface extends utils.Interface {
  functions: {
    "ADMIN_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "checkNodeSignatures((bytes32,bytes32,uint8)[],bytes,address)": FunctionFragment;
    "contractResolver()": FunctionFragment;
    "deriveEthAddressFromPubkey(bytes)": FunctionFragment;
    "env()": FunctionFragment;
    "ethAddressToPkpId(address)": FunctionFragment;
    "getDerivedPubkey(address,bytes32)": FunctionFragment;
    "getEthAddress(uint256)": FunctionFragment;
    "getPkpNftAddress()": FunctionFragment;
    "getPubkey(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRootKeys(address)": FunctionFragment;
    "getRoutingData(uint256)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isRouted(uint256)": FunctionFragment;
    "pubkeys(uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rootKeys(address,uint256)": FunctionFragment;
    "setContractResolver(address)": FunctionFragment;
    "setRoutingData(uint256,bytes,address,uint256,bytes32)": FunctionFragment;
    "setRoutingDataAsAdmin(uint256,bytes,address,uint256,bytes32)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "voteForRootKeys(address,(bytes,uint256)[])": FunctionFragment;
    "votesToRegisterRootKeys(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "checkNodeSignatures"
      | "contractResolver"
      | "deriveEthAddressFromPubkey"
      | "env"
      | "ethAddressToPkpId"
      | "getDerivedPubkey"
      | "getEthAddress"
      | "getPkpNftAddress"
      | "getPubkey"
      | "getRoleAdmin"
      | "getRootKeys"
      | "getRoutingData"
      | "grantRole"
      | "hasRole"
      | "isRouted"
      | "pubkeys"
      | "renounceRole"
      | "revokeRole"
      | "rootKeys"
      | "setContractResolver"
      | "setRoutingData"
      | "setRoutingDataAsAdmin"
      | "supportsInterface"
      | "voteForRootKeys"
      | "votesToRegisterRootKeys"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkNodeSignatures",
    values: [IPubkeyRouter.SignatureStruct[], BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "contractResolver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deriveEthAddressFromPubkey",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "env", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ethAddressToPkpId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDerivedPubkey",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPkpNftAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPubkey",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getRootKeys", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getRoutingData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isRouted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pubkeys",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rootKeys",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractResolver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoutingData",
    values: [BigNumberish, BytesLike, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoutingDataAsAdmin",
    values: [BigNumberish, BytesLike, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "voteForRootKeys",
    values: [string, IPubkeyRouter.RootKeyStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "votesToRegisterRootKeys",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkNodeSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deriveEthAddressFromPubkey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "env", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ethAddressToPkpId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDerivedPubkey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPkpNftAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPubkey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRootKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoutingData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isRouted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pubkeys", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rootKeys", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContractResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoutingData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoutingDataAsAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteForRootKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votesToRegisterRootKeys",
    data: BytesLike
  ): Result;

  events: {
    "ContractResolverAddressSet(address)": EventFragment;
    "PubkeyRoutingDataSet(uint256,bytes,address,uint256,bytes32)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "RootKeySet(address,(bytes,uint256))": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractResolverAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PubkeyRoutingDataSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RootKeySet"): EventFragment;
}

export interface ContractResolverAddressSetEventObject {
  newResolverAddress: string;
}
export type ContractResolverAddressSetEvent = TypedEvent<
  [string],
  ContractResolverAddressSetEventObject
>;

export type ContractResolverAddressSetEventFilter =
  TypedEventFilter<ContractResolverAddressSetEvent>;

export interface PubkeyRoutingDataSetEventObject {
  tokenId: BigNumber;
  pubkey: string;
  stakingContract: string;
  keyType: BigNumber;
  derivedKeyId: string;
}
export type PubkeyRoutingDataSetEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string],
  PubkeyRoutingDataSetEventObject
>;

export type PubkeyRoutingDataSetEventFilter =
  TypedEventFilter<PubkeyRoutingDataSetEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface RootKeySetEventObject {
  stakingContract: string;
  rootKey: IPubkeyRouter.RootKeyStructOutput;
}
export type RootKeySetEvent = TypedEvent<
  [string, IPubkeyRouter.RootKeyStructOutput],
  RootKeySetEventObject
>;

export type RootKeySetEventFilter = TypedEventFilter<RootKeySetEvent>;

export interface PubkeyRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PubkeyRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    checkNodeSignatures(
      signatures: IPubkeyRouter.SignatureStruct[],
      signedMessage: BytesLike,
      stakingContractAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    contractResolver(overrides?: CallOverrides): Promise<[string]>;

    deriveEthAddressFromPubkey(
      pubkey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    env(overrides?: CallOverrides): Promise<[number]>;

    ethAddressToPkpId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDerivedPubkey(
      stakingContract: string,
      derivedKeyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getEthAddress(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPkpNftAddress(overrides?: CallOverrides): Promise<[string]>;

    getPubkey(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRootKeys(
      stakingContract: string,
      overrides?: CallOverrides
    ): Promise<[IPubkeyRouter.RootKeyStructOutput[]]>;

    getRoutingData(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[PubkeyRouter.PubkeyRoutingDataStructOutput]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRouted(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pubkeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        pubkey: string;
        keyType: BigNumber;
        derivedKeyId: string;
      }
    >;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rootKeys(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { pubkey: string; keyType: BigNumber }>;

    setContractResolver(
      newResolverAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRoutingData(
      tokenId: BigNumberish,
      pubkey: BytesLike,
      stakingContractAddress: string,
      keyType: BigNumberish,
      derivedKeyId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRoutingDataAsAdmin(
      tokenId: BigNumberish,
      pubkey: BytesLike,
      stakingContract: string,
      keyType: BigNumberish,
      derivedKeyId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    voteForRootKeys(
      stakingContractAddress: string,
      newRootKeys: IPubkeyRouter.RootKeyStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    votesToRegisterRootKeys(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { votes: BigNumber }>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  checkNodeSignatures(
    signatures: IPubkeyRouter.SignatureStruct[],
    signedMessage: BytesLike,
    stakingContractAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  contractResolver(overrides?: CallOverrides): Promise<string>;

  deriveEthAddressFromPubkey(
    pubkey: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  env(overrides?: CallOverrides): Promise<number>;

  ethAddressToPkpId(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDerivedPubkey(
    stakingContract: string,
    derivedKeyId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getEthAddress(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPkpNftAddress(overrides?: CallOverrides): Promise<string>;

  getPubkey(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRootKeys(
    stakingContract: string,
    overrides?: CallOverrides
  ): Promise<IPubkeyRouter.RootKeyStructOutput[]>;

  getRoutingData(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<PubkeyRouter.PubkeyRoutingDataStructOutput>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRouted(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  pubkeys(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string] & {
      pubkey: string;
      keyType: BigNumber;
      derivedKeyId: string;
    }
  >;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rootKeys(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { pubkey: string; keyType: BigNumber }>;

  setContractResolver(
    newResolverAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRoutingData(
    tokenId: BigNumberish,
    pubkey: BytesLike,
    stakingContractAddress: string,
    keyType: BigNumberish,
    derivedKeyId: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRoutingDataAsAdmin(
    tokenId: BigNumberish,
    pubkey: BytesLike,
    stakingContract: string,
    keyType: BigNumberish,
    derivedKeyId: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  voteForRootKeys(
    stakingContractAddress: string,
    newRootKeys: IPubkeyRouter.RootKeyStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  votesToRegisterRootKeys(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    checkNodeSignatures(
      signatures: IPubkeyRouter.SignatureStruct[],
      signedMessage: BytesLike,
      stakingContractAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    contractResolver(overrides?: CallOverrides): Promise<string>;

    deriveEthAddressFromPubkey(
      pubkey: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    env(overrides?: CallOverrides): Promise<number>;

    ethAddressToPkpId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDerivedPubkey(
      stakingContract: string,
      derivedKeyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getEthAddress(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPkpNftAddress(overrides?: CallOverrides): Promise<string>;

    getPubkey(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRootKeys(
      stakingContract: string,
      overrides?: CallOverrides
    ): Promise<IPubkeyRouter.RootKeyStructOutput[]>;

    getRoutingData(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PubkeyRouter.PubkeyRoutingDataStructOutput>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRouted(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pubkeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        pubkey: string;
        keyType: BigNumber;
        derivedKeyId: string;
      }
    >;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rootKeys(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { pubkey: string; keyType: BigNumber }>;

    setContractResolver(
      newResolverAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoutingData(
      tokenId: BigNumberish,
      pubkey: BytesLike,
      stakingContractAddress: string,
      keyType: BigNumberish,
      derivedKeyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoutingDataAsAdmin(
      tokenId: BigNumberish,
      pubkey: BytesLike,
      stakingContract: string,
      keyType: BigNumberish,
      derivedKeyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    voteForRootKeys(
      stakingContractAddress: string,
      newRootKeys: IPubkeyRouter.RootKeyStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    votesToRegisterRootKeys(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ContractResolverAddressSet(address)"(
      newResolverAddress?: null
    ): ContractResolverAddressSetEventFilter;
    ContractResolverAddressSet(
      newResolverAddress?: null
    ): ContractResolverAddressSetEventFilter;

    "PubkeyRoutingDataSet(uint256,bytes,address,uint256,bytes32)"(
      tokenId?: BigNumberish | null,
      pubkey?: null,
      stakingContract?: null,
      keyType?: null,
      derivedKeyId?: null
    ): PubkeyRoutingDataSetEventFilter;
    PubkeyRoutingDataSet(
      tokenId?: BigNumberish | null,
      pubkey?: null,
      stakingContract?: null,
      keyType?: null,
      derivedKeyId?: null
    ): PubkeyRoutingDataSetEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "RootKeySet(address,(bytes,uint256))"(
      stakingContract?: null,
      rootKey?: null
    ): RootKeySetEventFilter;
    RootKeySet(stakingContract?: null, rootKey?: null): RootKeySetEventFilter;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    checkNodeSignatures(
      signatures: IPubkeyRouter.SignatureStruct[],
      signedMessage: BytesLike,
      stakingContractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractResolver(overrides?: CallOverrides): Promise<BigNumber>;

    deriveEthAddressFromPubkey(
      pubkey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    env(overrides?: CallOverrides): Promise<BigNumber>;

    ethAddressToPkpId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDerivedPubkey(
      stakingContract: string,
      derivedKeyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEthAddress(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPkpNftAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getPubkey(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRootKeys(
      stakingContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoutingData(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRouted(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pubkeys(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rootKeys(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setContractResolver(
      newResolverAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRoutingData(
      tokenId: BigNumberish,
      pubkey: BytesLike,
      stakingContractAddress: string,
      keyType: BigNumberish,
      derivedKeyId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRoutingDataAsAdmin(
      tokenId: BigNumberish,
      pubkey: BytesLike,
      stakingContract: string,
      keyType: BigNumberish,
      derivedKeyId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voteForRootKeys(
      stakingContractAddress: string,
      newRootKeys: IPubkeyRouter.RootKeyStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    votesToRegisterRootKeys(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkNodeSignatures(
      signatures: IPubkeyRouter.SignatureStruct[],
      signedMessage: BytesLike,
      stakingContractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractResolver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deriveEthAddressFromPubkey(
      pubkey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    env(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethAddressToPkpId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDerivedPubkey(
      stakingContract: string,
      derivedKeyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEthAddress(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPkpNftAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPubkey(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRootKeys(
      stakingContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoutingData(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRouted(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pubkeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rootKeys(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setContractResolver(
      newResolverAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRoutingData(
      tokenId: BigNumberish,
      pubkey: BytesLike,
      stakingContractAddress: string,
      keyType: BigNumberish,
      derivedKeyId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRoutingDataAsAdmin(
      tokenId: BigNumberish,
      pubkey: BytesLike,
      stakingContract: string,
      keyType: BigNumberish,
      derivedKeyId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voteForRootKeys(
      stakingContractAddress: string,
      newRootKeys: IPubkeyRouter.RootKeyStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    votesToRegisterRootKeys(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
