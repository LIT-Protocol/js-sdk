/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Staking {
  export type ValidatorStruct = {
    ip: BigNumberish;
    ipv6: BigNumberish;
    port: BigNumberish;
    nodeAddress: string;
    reward: BigNumberish;
    senderPubKey: BigNumberish;
    receiverPubKey: BigNumberish;
  };

  export type ValidatorStructOutput = [
    number,
    BigNumber,
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    ip: number;
    ipv6: BigNumber;
    port: number;
    nodeAddress: string;
    reward: BigNumber;
    senderPubKey: BigNumber;
    receiverPubKey: BigNumber;
  };
}

export interface StakingInterface extends utils.Interface {
  functions: {
    "adminKickValidatorInNextEpoch(address)": FunctionFragment;
    "adminRejoinValidator(address)": FunctionFragment;
    "adminSlashValidator(address,uint256)": FunctionFragment;
    "advanceEpoch()": FunctionFragment;
    "config()": FunctionFragment;
    "contractResolver()": FunctionFragment;
    "countOfCurrentValidatorsReadyForNextEpoch()": FunctionFragment;
    "countOfNextValidatorsReadyForNextEpoch()": FunctionFragment;
    "currentValidatorCountForConsensus()": FunctionFragment;
    "env()": FunctionFragment;
    "epoch()": FunctionFragment;
    "exit()": FunctionFragment;
    "getKeyTypes()": FunctionFragment;
    "getKickedValidators()": FunctionFragment;
    "getReward()": FunctionFragment;
    "getStakingBalancesAddress()": FunctionFragment;
    "getTokenAddress()": FunctionFragment;
    "getValidatorsInCurrentEpoch()": FunctionFragment;
    "getValidatorsInCurrentEpochLength()": FunctionFragment;
    "getValidatorsInNextEpoch()": FunctionFragment;
    "getValidatorsStructs(address[])": FunctionFragment;
    "getValidatorsStructsInCurrentEpoch()": FunctionFragment;
    "getValidatorsStructsInNextEpoch()": FunctionFragment;
    "getVotingStatusToKickValidator(uint256,address,address)": FunctionFragment;
    "isActiveValidator(address)": FunctionFragment;
    "isActiveValidatorByNodeAddress(address)": FunctionFragment;
    "isReadyForNextEpoch()": FunctionFragment;
    "kickPenaltyPercentByReason(uint256)": FunctionFragment;
    "kickValidatorInNextEpoch(address,uint256,bytes)": FunctionFragment;
    "lockValidatorsForNextEpoch()": FunctionFragment;
    "nextValidatorCountForConsensus()": FunctionFragment;
    "nodeAddressToStakerAddress(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "readyForNextEpoch(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestToJoin(uint32,uint128,uint32,address,uint256,uint256)": FunctionFragment;
    "requestToLeave()": FunctionFragment;
    "setConfig(uint256,uint256,uint256,uint256[],uint256)": FunctionFragment;
    "setContractResolver(address)": FunctionFragment;
    "setEpochEndTime(uint256)": FunctionFragment;
    "setEpochLength(uint256)": FunctionFragment;
    "setEpochState(uint8)": FunctionFragment;
    "setEpochTimeout(uint256)": FunctionFragment;
    "setIpPortNodeAddressAndCommunicationPubKeys(uint32,uint128,uint32,address,uint256,uint256)": FunctionFragment;
    "setKickPenaltyPercent(uint256,uint256)": FunctionFragment;
    "shouldKickValidator(address)": FunctionFragment;
    "signalReadyForNextEpoch(uint256)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakeAndJoin(uint256,uint32,uint128,uint32,address,uint256,uint256)": FunctionFragment;
    "state()": FunctionFragment;
    "totalStaked()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlockValidatorsForNextEpoch()": FunctionFragment;
    "usedCommsKeys(bytes32)": FunctionFragment;
    "validators(address)": FunctionFragment;
    "votesToKickValidatorsInNextEpoch(uint256,address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "adminKickValidatorInNextEpoch"
      | "adminRejoinValidator"
      | "adminSlashValidator"
      | "advanceEpoch"
      | "config"
      | "contractResolver"
      | "countOfCurrentValidatorsReadyForNextEpoch"
      | "countOfNextValidatorsReadyForNextEpoch"
      | "currentValidatorCountForConsensus"
      | "env"
      | "epoch"
      | "exit"
      | "getKeyTypes"
      | "getKickedValidators"
      | "getReward"
      | "getStakingBalancesAddress"
      | "getTokenAddress"
      | "getValidatorsInCurrentEpoch"
      | "getValidatorsInCurrentEpochLength"
      | "getValidatorsInNextEpoch"
      | "getValidatorsStructs"
      | "getValidatorsStructsInCurrentEpoch"
      | "getValidatorsStructsInNextEpoch"
      | "getVotingStatusToKickValidator"
      | "isActiveValidator"
      | "isActiveValidatorByNodeAddress"
      | "isReadyForNextEpoch"
      | "kickPenaltyPercentByReason"
      | "kickValidatorInNextEpoch"
      | "lockValidatorsForNextEpoch"
      | "nextValidatorCountForConsensus"
      | "nodeAddressToStakerAddress"
      | "owner"
      | "readyForNextEpoch"
      | "renounceOwnership"
      | "requestToJoin"
      | "requestToLeave"
      | "setConfig"
      | "setContractResolver"
      | "setEpochEndTime"
      | "setEpochLength"
      | "setEpochState"
      | "setEpochTimeout"
      | "setIpPortNodeAddressAndCommunicationPubKeys"
      | "setKickPenaltyPercent"
      | "shouldKickValidator"
      | "signalReadyForNextEpoch"
      | "stake"
      | "stakeAndJoin"
      | "state"
      | "totalStaked"
      | "transferOwnership"
      | "unlockValidatorsForNextEpoch"
      | "usedCommsKeys"
      | "validators"
      | "votesToKickValidatorsInNextEpoch"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "adminKickValidatorInNextEpoch",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "adminRejoinValidator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "adminSlashValidator",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "advanceEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "contractResolver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "countOfCurrentValidatorsReadyForNextEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "countOfNextValidatorsReadyForNextEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentValidatorCountForConsensus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "env", values?: undefined): string;
  encodeFunctionData(functionFragment: "epoch", values?: undefined): string;
  encodeFunctionData(functionFragment: "exit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getKeyTypes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getKickedValidators",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getReward", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getStakingBalancesAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorsInCurrentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorsInCurrentEpochLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorsInNextEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorsStructs",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorsStructsInCurrentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorsStructsInNextEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingStatusToKickValidator",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveValidator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveValidatorByNodeAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isReadyForNextEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "kickPenaltyPercentByReason",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "kickValidatorInNextEpoch",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockValidatorsForNextEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextValidatorCountForConsensus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nodeAddressToStakerAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "readyForNextEpoch",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestToJoin",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requestToLeave",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractResolver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEpochEndTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEpochLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEpochState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEpochTimeout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setIpPortNodeAddressAndCommunicationPubKeys",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setKickPenaltyPercent",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldKickValidator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "signalReadyForNextEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakeAndJoin",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockValidatorsForNextEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "usedCommsKeys",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "validators", values: [string]): string;
  encodeFunctionData(
    functionFragment: "votesToKickValidatorsInNextEpoch",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "adminKickValidatorInNextEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminRejoinValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminSlashValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "advanceEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countOfCurrentValidatorsReadyForNextEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countOfNextValidatorsReadyForNextEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentValidatorCountForConsensus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "env", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "epoch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getKeyTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKickedValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStakingBalancesAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorsInCurrentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorsInCurrentEpochLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorsInNextEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorsStructs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorsStructsInCurrentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorsStructsInNextEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingStatusToKickValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActiveValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActiveValidatorByNodeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isReadyForNextEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kickPenaltyPercentByReason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kickValidatorInNextEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockValidatorsForNextEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextValidatorCountForConsensus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nodeAddressToStakerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readyForNextEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestToJoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestToLeave",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContractResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEpochEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEpochLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEpochState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEpochTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIpPortNodeAddressAndCommunicationPubKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKickPenaltyPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldKickValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalReadyForNextEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeAndJoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockValidatorsForNextEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usedCommsKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validators", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votesToKickValidatorsInNextEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "ConfigSet(uint256,uint256,uint256,uint256[],uint256)": EventFragment;
    "EpochEndTimeSet(uint256)": EventFragment;
    "EpochLengthSet(uint256)": EventFragment;
    "EpochTimeoutSet(uint256)": EventFragment;
    "KickPenaltyPercentSet(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ReadyForNextEpoch(address,uint256)": EventFragment;
    "Recovered(address,uint256)": EventFragment;
    "RequestToJoin(address)": EventFragment;
    "RequestToLeave(address)": EventFragment;
    "ResolverContractAddressSet(address)": EventFragment;
    "RewardsDurationUpdated(uint256)": EventFragment;
    "StakingTokenSet(address)": EventFragment;
    "StateChanged(uint8)": EventFragment;
    "ValidatorKickedFromNextEpoch(address,uint256)": EventFragment;
    "ValidatorRejoinedNextEpoch(address)": EventFragment;
    "VotedToKickValidatorInNextEpoch(address,address,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ConfigSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EpochEndTimeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EpochLengthSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EpochTimeoutSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KickPenaltyPercentSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReadyForNextEpoch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Recovered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestToJoin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestToLeave"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResolverContractAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsDurationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingTokenSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StateChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ValidatorKickedFromNextEpoch"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorRejoinedNextEpoch"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "VotedToKickValidatorInNextEpoch"
  ): EventFragment;
}

export interface ConfigSetEventObject {
  newTokenRewardPerTokenPerEpoch: BigNumber;
  newComplaintTolerance: BigNumber;
  newComplaintIntervalSecs: BigNumber;
  newKeyTypes: BigNumber[];
  newMinimumValidatorCount: BigNumber;
}
export type ConfigSetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber[], BigNumber],
  ConfigSetEventObject
>;

export type ConfigSetEventFilter = TypedEventFilter<ConfigSetEvent>;

export interface EpochEndTimeSetEventObject {
  newEpochEndTime: BigNumber;
}
export type EpochEndTimeSetEvent = TypedEvent<
  [BigNumber],
  EpochEndTimeSetEventObject
>;

export type EpochEndTimeSetEventFilter = TypedEventFilter<EpochEndTimeSetEvent>;

export interface EpochLengthSetEventObject {
  newEpochLength: BigNumber;
}
export type EpochLengthSetEvent = TypedEvent<
  [BigNumber],
  EpochLengthSetEventObject
>;

export type EpochLengthSetEventFilter = TypedEventFilter<EpochLengthSetEvent>;

export interface EpochTimeoutSetEventObject {
  newEpochTimeout: BigNumber;
}
export type EpochTimeoutSetEvent = TypedEvent<
  [BigNumber],
  EpochTimeoutSetEventObject
>;

export type EpochTimeoutSetEventFilter = TypedEventFilter<EpochTimeoutSetEvent>;

export interface KickPenaltyPercentSetEventObject {
  reason: BigNumber;
  newKickPenaltyPercent: BigNumber;
}
export type KickPenaltyPercentSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  KickPenaltyPercentSetEventObject
>;

export type KickPenaltyPercentSetEventFilter =
  TypedEventFilter<KickPenaltyPercentSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ReadyForNextEpochEventObject {
  staker: string;
  epochNumber: BigNumber;
}
export type ReadyForNextEpochEvent = TypedEvent<
  [string, BigNumber],
  ReadyForNextEpochEventObject
>;

export type ReadyForNextEpochEventFilter =
  TypedEventFilter<ReadyForNextEpochEvent>;

export interface RecoveredEventObject {
  token: string;
  amount: BigNumber;
}
export type RecoveredEvent = TypedEvent<
  [string, BigNumber],
  RecoveredEventObject
>;

export type RecoveredEventFilter = TypedEventFilter<RecoveredEvent>;

export interface RequestToJoinEventObject {
  staker: string;
}
export type RequestToJoinEvent = TypedEvent<[string], RequestToJoinEventObject>;

export type RequestToJoinEventFilter = TypedEventFilter<RequestToJoinEvent>;

export interface RequestToLeaveEventObject {
  staker: string;
}
export type RequestToLeaveEvent = TypedEvent<
  [string],
  RequestToLeaveEventObject
>;

export type RequestToLeaveEventFilter = TypedEventFilter<RequestToLeaveEvent>;

export interface ResolverContractAddressSetEventObject {
  newResolverContractAddress: string;
}
export type ResolverContractAddressSetEvent = TypedEvent<
  [string],
  ResolverContractAddressSetEventObject
>;

export type ResolverContractAddressSetEventFilter =
  TypedEventFilter<ResolverContractAddressSetEvent>;

export interface RewardsDurationUpdatedEventObject {
  newDuration: BigNumber;
}
export type RewardsDurationUpdatedEvent = TypedEvent<
  [BigNumber],
  RewardsDurationUpdatedEventObject
>;

export type RewardsDurationUpdatedEventFilter =
  TypedEventFilter<RewardsDurationUpdatedEvent>;

export interface StakingTokenSetEventObject {
  newStakingTokenAddress: string;
}
export type StakingTokenSetEvent = TypedEvent<
  [string],
  StakingTokenSetEventObject
>;

export type StakingTokenSetEventFilter = TypedEventFilter<StakingTokenSetEvent>;

export interface StateChangedEventObject {
  newState: number;
}
export type StateChangedEvent = TypedEvent<[number], StateChangedEventObject>;

export type StateChangedEventFilter = TypedEventFilter<StateChangedEvent>;

export interface ValidatorKickedFromNextEpochEventObject {
  staker: string;
  amountBurned: BigNumber;
}
export type ValidatorKickedFromNextEpochEvent = TypedEvent<
  [string, BigNumber],
  ValidatorKickedFromNextEpochEventObject
>;

export type ValidatorKickedFromNextEpochEventFilter =
  TypedEventFilter<ValidatorKickedFromNextEpochEvent>;

export interface ValidatorRejoinedNextEpochEventObject {
  staker: string;
}
export type ValidatorRejoinedNextEpochEvent = TypedEvent<
  [string],
  ValidatorRejoinedNextEpochEventObject
>;

export type ValidatorRejoinedNextEpochEventFilter =
  TypedEventFilter<ValidatorRejoinedNextEpochEvent>;

export interface VotedToKickValidatorInNextEpochEventObject {
  reporter: string;
  validatorStakerAddress: string;
  reason: BigNumber;
  data: string;
}
export type VotedToKickValidatorInNextEpochEvent = TypedEvent<
  [string, string, BigNumber, string],
  VotedToKickValidatorInNextEpochEventObject
>;

export type VotedToKickValidatorInNextEpochEventFilter =
  TypedEventFilter<VotedToKickValidatorInNextEpochEvent>;

export interface Staking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adminKickValidatorInNextEpoch(
      validatorStakerAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adminRejoinValidator(
      staker: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adminSlashValidator(
      validatorStakerAddress: string,
      amountToPenalize: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    advanceEpoch(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    config(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        tokenRewardPerTokenPerEpoch: BigNumber;
        complaintTolerance: BigNumber;
        complaintIntervalSecs: BigNumber;
        minimumValidatorCount: BigNumber;
      }
    >;

    contractResolver(overrides?: CallOverrides): Promise<[string]>;

    countOfCurrentValidatorsReadyForNextEpoch(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    countOfNextValidatorsReadyForNextEpoch(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentValidatorCountForConsensus(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    env(overrides?: CallOverrides): Promise<[number]>;

    epoch(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        epochLength: BigNumber;
        number: BigNumber;
        endTime: BigNumber;
        retries: BigNumber;
        timeout: BigNumber;
      }
    >;

    exit(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getKeyTypes(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getKickedValidators(overrides?: CallOverrides): Promise<[string[]]>;

    getReward(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getStakingBalancesAddress(overrides?: CallOverrides): Promise<[string]>;

    getTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    getValidatorsInCurrentEpoch(overrides?: CallOverrides): Promise<[string[]]>;

    getValidatorsInCurrentEpochLength(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getValidatorsInNextEpoch(overrides?: CallOverrides): Promise<[string[]]>;

    getValidatorsStructs(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<[Staking.ValidatorStructOutput[]]>;

    getValidatorsStructsInCurrentEpoch(
      overrides?: CallOverrides
    ): Promise<[Staking.ValidatorStructOutput[]]>;

    getValidatorsStructsInNextEpoch(
      overrides?: CallOverrides
    ): Promise<[Staking.ValidatorStructOutput[]]>;

    getVotingStatusToKickValidator(
      epochNumber: BigNumberish,
      validatorStakerAddress: string,
      voterStakerAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    isActiveValidator(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isActiveValidatorByNodeAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isReadyForNextEpoch(overrides?: CallOverrides): Promise<[boolean]>;

    kickPenaltyPercentByReason(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    kickValidatorInNextEpoch(
      validatorStakerAddress: string,
      reason: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    lockValidatorsForNextEpoch(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    nextValidatorCountForConsensus(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nodeAddressToStakerAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    readyForNextEpoch(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    requestToJoin(
      ip: BigNumberish,
      ipv6: BigNumberish,
      port: BigNumberish,
      nodeAddress: string,
      senderPubKey: BigNumberish,
      receiverPubKey: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    requestToLeave(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setConfig(
      newTokenRewardPerTokenPerEpoch: BigNumberish,
      newComplaintTolerance: BigNumberish,
      newComplaintIntervalSecs: BigNumberish,
      newKeyTypes: BigNumberish[],
      newMinimumValidatorCount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setContractResolver(
      newResolverAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setEpochEndTime(
      newEpochEndTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setEpochLength(
      newEpochLength: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setEpochState(
      newState: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setEpochTimeout(
      newEpochTimeout: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setIpPortNodeAddressAndCommunicationPubKeys(
      ip: BigNumberish,
      ipv6: BigNumberish,
      port: BigNumberish,
      nodeAddress: string,
      senderPubKey: BigNumberish,
      receiverPubKey: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setKickPenaltyPercent(
      reason: BigNumberish,
      newKickPenaltyPercent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    shouldKickValidator(
      stakerAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    signalReadyForNextEpoch(
      epochNumber: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stakeAndJoin(
      amount: BigNumberish,
      ip: BigNumberish,
      ipv6: BigNumberish,
      port: BigNumberish,
      nodeAddress: string,
      senderPubKey: BigNumberish,
      receiverPubKey: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    state(overrides?: CallOverrides): Promise<[number]>;

    totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unlockValidatorsForNextEpoch(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    usedCommsKeys(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    validators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, number, string, BigNumber, BigNumber, BigNumber] & {
        ip: number;
        ipv6: BigNumber;
        port: number;
        nodeAddress: string;
        reward: BigNumber;
        senderPubKey: BigNumber;
        receiverPubKey: BigNumber;
      }
    >;

    votesToKickValidatorsInNextEpoch(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { votes: BigNumber }>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  adminKickValidatorInNextEpoch(
    validatorStakerAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adminRejoinValidator(
    staker: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adminSlashValidator(
    validatorStakerAddress: string,
    amountToPenalize: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  advanceEpoch(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  config(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      tokenRewardPerTokenPerEpoch: BigNumber;
      complaintTolerance: BigNumber;
      complaintIntervalSecs: BigNumber;
      minimumValidatorCount: BigNumber;
    }
  >;

  contractResolver(overrides?: CallOverrides): Promise<string>;

  countOfCurrentValidatorsReadyForNextEpoch(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  countOfNextValidatorsReadyForNextEpoch(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentValidatorCountForConsensus(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  env(overrides?: CallOverrides): Promise<number>;

  epoch(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      epochLength: BigNumber;
      number: BigNumber;
      endTime: BigNumber;
      retries: BigNumber;
      timeout: BigNumber;
    }
  >;

  exit(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  getKeyTypes(overrides?: CallOverrides): Promise<BigNumber[]>;

  getKickedValidators(overrides?: CallOverrides): Promise<string[]>;

  getReward(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getStakingBalancesAddress(overrides?: CallOverrides): Promise<string>;

  getTokenAddress(overrides?: CallOverrides): Promise<string>;

  getValidatorsInCurrentEpoch(overrides?: CallOverrides): Promise<string[]>;

  getValidatorsInCurrentEpochLength(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getValidatorsInNextEpoch(overrides?: CallOverrides): Promise<string[]>;

  getValidatorsStructs(
    addresses: string[],
    overrides?: CallOverrides
  ): Promise<Staking.ValidatorStructOutput[]>;

  getValidatorsStructsInCurrentEpoch(
    overrides?: CallOverrides
  ): Promise<Staking.ValidatorStructOutput[]>;

  getValidatorsStructsInNextEpoch(
    overrides?: CallOverrides
  ): Promise<Staking.ValidatorStructOutput[]>;

  getVotingStatusToKickValidator(
    epochNumber: BigNumberish,
    validatorStakerAddress: string,
    voterStakerAddress: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean]>;

  isActiveValidator(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isActiveValidatorByNodeAddress(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isReadyForNextEpoch(overrides?: CallOverrides): Promise<boolean>;

  kickPenaltyPercentByReason(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  kickValidatorInNextEpoch(
    validatorStakerAddress: string,
    reason: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  lockValidatorsForNextEpoch(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  nextValidatorCountForConsensus(overrides?: CallOverrides): Promise<BigNumber>;

  nodeAddressToStakerAddress(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  readyForNextEpoch(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  requestToJoin(
    ip: BigNumberish,
    ipv6: BigNumberish,
    port: BigNumberish,
    nodeAddress: string,
    senderPubKey: BigNumberish,
    receiverPubKey: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  requestToLeave(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setConfig(
    newTokenRewardPerTokenPerEpoch: BigNumberish,
    newComplaintTolerance: BigNumberish,
    newComplaintIntervalSecs: BigNumberish,
    newKeyTypes: BigNumberish[],
    newMinimumValidatorCount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setContractResolver(
    newResolverAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setEpochEndTime(
    newEpochEndTime: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setEpochLength(
    newEpochLength: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setEpochState(
    newState: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setEpochTimeout(
    newEpochTimeout: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setIpPortNodeAddressAndCommunicationPubKeys(
    ip: BigNumberish,
    ipv6: BigNumberish,
    port: BigNumberish,
    nodeAddress: string,
    senderPubKey: BigNumberish,
    receiverPubKey: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setKickPenaltyPercent(
    reason: BigNumberish,
    newKickPenaltyPercent: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  shouldKickValidator(
    stakerAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  signalReadyForNextEpoch(
    epochNumber: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stakeAndJoin(
    amount: BigNumberish,
    ip: BigNumberish,
    ipv6: BigNumberish,
    port: BigNumberish,
    nodeAddress: string,
    senderPubKey: BigNumberish,
    receiverPubKey: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  state(overrides?: CallOverrides): Promise<number>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unlockValidatorsForNextEpoch(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  usedCommsKeys(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  validators(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, number, string, BigNumber, BigNumber, BigNumber] & {
      ip: number;
      ipv6: BigNumber;
      port: number;
      nodeAddress: string;
      reward: BigNumber;
      senderPubKey: BigNumber;
      receiverPubKey: BigNumber;
    }
  >;

  votesToKickValidatorsInNextEpoch(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    adminKickValidatorInNextEpoch(
      validatorStakerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    adminRejoinValidator(
      staker: string,
      overrides?: CallOverrides
    ): Promise<void>;

    adminSlashValidator(
      validatorStakerAddress: string,
      amountToPenalize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    advanceEpoch(overrides?: CallOverrides): Promise<void>;

    config(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        tokenRewardPerTokenPerEpoch: BigNumber;
        complaintTolerance: BigNumber;
        complaintIntervalSecs: BigNumber;
        minimumValidatorCount: BigNumber;
      }
    >;

    contractResolver(overrides?: CallOverrides): Promise<string>;

    countOfCurrentValidatorsReadyForNextEpoch(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countOfNextValidatorsReadyForNextEpoch(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentValidatorCountForConsensus(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    env(overrides?: CallOverrides): Promise<number>;

    epoch(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        epochLength: BigNumber;
        number: BigNumber;
        endTime: BigNumber;
        retries: BigNumber;
        timeout: BigNumber;
      }
    >;

    exit(overrides?: CallOverrides): Promise<void>;

    getKeyTypes(overrides?: CallOverrides): Promise<BigNumber[]>;

    getKickedValidators(overrides?: CallOverrides): Promise<string[]>;

    getReward(overrides?: CallOverrides): Promise<void>;

    getStakingBalancesAddress(overrides?: CallOverrides): Promise<string>;

    getTokenAddress(overrides?: CallOverrides): Promise<string>;

    getValidatorsInCurrentEpoch(overrides?: CallOverrides): Promise<string[]>;

    getValidatorsInCurrentEpochLength(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidatorsInNextEpoch(overrides?: CallOverrides): Promise<string[]>;

    getValidatorsStructs(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<Staking.ValidatorStructOutput[]>;

    getValidatorsStructsInCurrentEpoch(
      overrides?: CallOverrides
    ): Promise<Staking.ValidatorStructOutput[]>;

    getValidatorsStructsInNextEpoch(
      overrides?: CallOverrides
    ): Promise<Staking.ValidatorStructOutput[]>;

    getVotingStatusToKickValidator(
      epochNumber: BigNumberish,
      validatorStakerAddress: string,
      voterStakerAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    isActiveValidator(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isActiveValidatorByNodeAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isReadyForNextEpoch(overrides?: CallOverrides): Promise<boolean>;

    kickPenaltyPercentByReason(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kickValidatorInNextEpoch(
      validatorStakerAddress: string,
      reason: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    lockValidatorsForNextEpoch(overrides?: CallOverrides): Promise<void>;

    nextValidatorCountForConsensus(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nodeAddressToStakerAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    readyForNextEpoch(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestToJoin(
      ip: BigNumberish,
      ipv6: BigNumberish,
      port: BigNumberish,
      nodeAddress: string,
      senderPubKey: BigNumberish,
      receiverPubKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    requestToLeave(overrides?: CallOverrides): Promise<void>;

    setConfig(
      newTokenRewardPerTokenPerEpoch: BigNumberish,
      newComplaintTolerance: BigNumberish,
      newComplaintIntervalSecs: BigNumberish,
      newKeyTypes: BigNumberish[],
      newMinimumValidatorCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractResolver(
      newResolverAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEpochEndTime(
      newEpochEndTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEpochLength(
      newEpochLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEpochState(
      newState: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEpochTimeout(
      newEpochTimeout: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setIpPortNodeAddressAndCommunicationPubKeys(
      ip: BigNumberish,
      ipv6: BigNumberish,
      port: BigNumberish,
      nodeAddress: string,
      senderPubKey: BigNumberish,
      receiverPubKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setKickPenaltyPercent(
      reason: BigNumberish,
      newKickPenaltyPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    shouldKickValidator(
      stakerAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    signalReadyForNextEpoch(
      epochNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakeAndJoin(
      amount: BigNumberish,
      ip: BigNumberish,
      ipv6: BigNumberish,
      port: BigNumberish,
      nodeAddress: string,
      senderPubKey: BigNumberish,
      receiverPubKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    state(overrides?: CallOverrides): Promise<number>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockValidatorsForNextEpoch(overrides?: CallOverrides): Promise<void>;

    usedCommsKeys(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    validators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, number, string, BigNumber, BigNumber, BigNumber] & {
        ip: number;
        ipv6: BigNumber;
        port: number;
        nodeAddress: string;
        reward: BigNumber;
        senderPubKey: BigNumber;
        receiverPubKey: BigNumber;
      }
    >;

    votesToKickValidatorsInNextEpoch(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ConfigSet(uint256,uint256,uint256,uint256[],uint256)"(
      newTokenRewardPerTokenPerEpoch?: null,
      newComplaintTolerance?: null,
      newComplaintIntervalSecs?: null,
      newKeyTypes?: null,
      newMinimumValidatorCount?: null
    ): ConfigSetEventFilter;
    ConfigSet(
      newTokenRewardPerTokenPerEpoch?: null,
      newComplaintTolerance?: null,
      newComplaintIntervalSecs?: null,
      newKeyTypes?: null,
      newMinimumValidatorCount?: null
    ): ConfigSetEventFilter;

    "EpochEndTimeSet(uint256)"(
      newEpochEndTime?: null
    ): EpochEndTimeSetEventFilter;
    EpochEndTimeSet(newEpochEndTime?: null): EpochEndTimeSetEventFilter;

    "EpochLengthSet(uint256)"(newEpochLength?: null): EpochLengthSetEventFilter;
    EpochLengthSet(newEpochLength?: null): EpochLengthSetEventFilter;

    "EpochTimeoutSet(uint256)"(
      newEpochTimeout?: null
    ): EpochTimeoutSetEventFilter;
    EpochTimeoutSet(newEpochTimeout?: null): EpochTimeoutSetEventFilter;

    "KickPenaltyPercentSet(uint256,uint256)"(
      reason?: null,
      newKickPenaltyPercent?: null
    ): KickPenaltyPercentSetEventFilter;
    KickPenaltyPercentSet(
      reason?: null,
      newKickPenaltyPercent?: null
    ): KickPenaltyPercentSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ReadyForNextEpoch(address,uint256)"(
      staker?: string | null,
      epochNumber?: null
    ): ReadyForNextEpochEventFilter;
    ReadyForNextEpoch(
      staker?: string | null,
      epochNumber?: null
    ): ReadyForNextEpochEventFilter;

    "Recovered(address,uint256)"(
      token?: null,
      amount?: null
    ): RecoveredEventFilter;
    Recovered(token?: null, amount?: null): RecoveredEventFilter;

    "RequestToJoin(address)"(staker?: string | null): RequestToJoinEventFilter;
    RequestToJoin(staker?: string | null): RequestToJoinEventFilter;

    "RequestToLeave(address)"(
      staker?: string | null
    ): RequestToLeaveEventFilter;
    RequestToLeave(staker?: string | null): RequestToLeaveEventFilter;

    "ResolverContractAddressSet(address)"(
      newResolverContractAddress?: null
    ): ResolverContractAddressSetEventFilter;
    ResolverContractAddressSet(
      newResolverContractAddress?: null
    ): ResolverContractAddressSetEventFilter;

    "RewardsDurationUpdated(uint256)"(
      newDuration?: null
    ): RewardsDurationUpdatedEventFilter;
    RewardsDurationUpdated(
      newDuration?: null
    ): RewardsDurationUpdatedEventFilter;

    "StakingTokenSet(address)"(
      newStakingTokenAddress?: null
    ): StakingTokenSetEventFilter;
    StakingTokenSet(newStakingTokenAddress?: null): StakingTokenSetEventFilter;

    "StateChanged(uint8)"(newState?: null): StateChangedEventFilter;
    StateChanged(newState?: null): StateChangedEventFilter;

    "ValidatorKickedFromNextEpoch(address,uint256)"(
      staker?: string | null,
      amountBurned?: null
    ): ValidatorKickedFromNextEpochEventFilter;
    ValidatorKickedFromNextEpoch(
      staker?: string | null,
      amountBurned?: null
    ): ValidatorKickedFromNextEpochEventFilter;

    "ValidatorRejoinedNextEpoch(address)"(
      staker?: null
    ): ValidatorRejoinedNextEpochEventFilter;
    ValidatorRejoinedNextEpoch(
      staker?: null
    ): ValidatorRejoinedNextEpochEventFilter;

    "VotedToKickValidatorInNextEpoch(address,address,uint256,bytes)"(
      reporter?: string | null,
      validatorStakerAddress?: string | null,
      reason?: BigNumberish | null,
      data?: null
    ): VotedToKickValidatorInNextEpochEventFilter;
    VotedToKickValidatorInNextEpoch(
      reporter?: string | null,
      validatorStakerAddress?: string | null,
      reason?: BigNumberish | null,
      data?: null
    ): VotedToKickValidatorInNextEpochEventFilter;
  };

  estimateGas: {
    adminKickValidatorInNextEpoch(
      validatorStakerAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    adminRejoinValidator(
      staker: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    adminSlashValidator(
      validatorStakerAddress: string,
      amountToPenalize: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    advanceEpoch(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    contractResolver(overrides?: CallOverrides): Promise<BigNumber>;

    countOfCurrentValidatorsReadyForNextEpoch(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countOfNextValidatorsReadyForNextEpoch(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentValidatorCountForConsensus(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    env(overrides?: CallOverrides): Promise<BigNumber>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    exit(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    getKeyTypes(overrides?: CallOverrides): Promise<BigNumber>;

    getKickedValidators(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    getStakingBalancesAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getValidatorsInCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getValidatorsInCurrentEpochLength(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidatorsInNextEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getValidatorsStructs(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidatorsStructsInCurrentEpoch(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidatorsStructsInNextEpoch(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingStatusToKickValidator(
      epochNumber: BigNumberish,
      validatorStakerAddress: string,
      voterStakerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActiveValidator(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActiveValidatorByNodeAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isReadyForNextEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    kickPenaltyPercentByReason(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kickValidatorInNextEpoch(
      validatorStakerAddress: string,
      reason: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    lockValidatorsForNextEpoch(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    nextValidatorCountForConsensus(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nodeAddressToStakerAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    readyForNextEpoch(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    requestToJoin(
      ip: BigNumberish,
      ipv6: BigNumberish,
      port: BigNumberish,
      nodeAddress: string,
      senderPubKey: BigNumberish,
      receiverPubKey: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    requestToLeave(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setConfig(
      newTokenRewardPerTokenPerEpoch: BigNumberish,
      newComplaintTolerance: BigNumberish,
      newComplaintIntervalSecs: BigNumberish,
      newKeyTypes: BigNumberish[],
      newMinimumValidatorCount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setContractResolver(
      newResolverAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setEpochEndTime(
      newEpochEndTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setEpochLength(
      newEpochLength: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setEpochState(
      newState: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setEpochTimeout(
      newEpochTimeout: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setIpPortNodeAddressAndCommunicationPubKeys(
      ip: BigNumberish,
      ipv6: BigNumberish,
      port: BigNumberish,
      nodeAddress: string,
      senderPubKey: BigNumberish,
      receiverPubKey: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setKickPenaltyPercent(
      reason: BigNumberish,
      newKickPenaltyPercent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    shouldKickValidator(
      stakerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    signalReadyForNextEpoch(
      epochNumber: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stakeAndJoin(
      amount: BigNumberish,
      ip: BigNumberish,
      ipv6: BigNumberish,
      port: BigNumberish,
      nodeAddress: string,
      senderPubKey: BigNumberish,
      receiverPubKey: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    state(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unlockValidatorsForNextEpoch(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    usedCommsKeys(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validators(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    votesToKickValidatorsInNextEpoch(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adminKickValidatorInNextEpoch(
      validatorStakerAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adminRejoinValidator(
      staker: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adminSlashValidator(
      validatorStakerAddress: string,
      amountToPenalize: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    advanceEpoch(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractResolver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    countOfCurrentValidatorsReadyForNextEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    countOfNextValidatorsReadyForNextEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentValidatorCountForConsensus(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    env(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exit(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getKeyTypes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getKickedValidators(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReward(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getStakingBalancesAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getValidatorsInCurrentEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidatorsInCurrentEpochLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidatorsInNextEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidatorsStructs(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidatorsStructsInCurrentEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidatorsStructsInNextEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotingStatusToKickValidator(
      epochNumber: BigNumberish,
      validatorStakerAddress: string,
      voterStakerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActiveValidator(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActiveValidatorByNodeAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isReadyForNextEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kickPenaltyPercentByReason(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kickValidatorInNextEpoch(
      validatorStakerAddress: string,
      reason: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    lockValidatorsForNextEpoch(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    nextValidatorCountForConsensus(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nodeAddressToStakerAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    readyForNextEpoch(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    requestToJoin(
      ip: BigNumberish,
      ipv6: BigNumberish,
      port: BigNumberish,
      nodeAddress: string,
      senderPubKey: BigNumberish,
      receiverPubKey: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    requestToLeave(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setConfig(
      newTokenRewardPerTokenPerEpoch: BigNumberish,
      newComplaintTolerance: BigNumberish,
      newComplaintIntervalSecs: BigNumberish,
      newKeyTypes: BigNumberish[],
      newMinimumValidatorCount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setContractResolver(
      newResolverAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setEpochEndTime(
      newEpochEndTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setEpochLength(
      newEpochLength: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setEpochState(
      newState: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setEpochTimeout(
      newEpochTimeout: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setIpPortNodeAddressAndCommunicationPubKeys(
      ip: BigNumberish,
      ipv6: BigNumberish,
      port: BigNumberish,
      nodeAddress: string,
      senderPubKey: BigNumberish,
      receiverPubKey: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setKickPenaltyPercent(
      reason: BigNumberish,
      newKickPenaltyPercent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    shouldKickValidator(
      stakerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    signalReadyForNextEpoch(
      epochNumber: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stakeAndJoin(
      amount: BigNumberish,
      ip: BigNumberish,
      ipv6: BigNumberish,
      port: BigNumberish,
      nodeAddress: string,
      senderPubKey: BigNumberish,
      receiverPubKey: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    state(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unlockValidatorsForNextEpoch(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    usedCommsKeys(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votesToKickValidatorsInNextEpoch(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
