/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IPubkeyRouter {
  export type SignatureStruct = { r: BytesLike; s: BytesLike; v: BigNumberish };

  export type SignatureStructOutput = [string, string, number] & {
    r: string;
    s: string;
    v: number;
  };
}

export interface PKPHelperInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "claimAndMintNextAndAddAuthMethods(uint256,bytes32,(bytes32,bytes32,uint8)[],uint256[],bytes[],bytes[],uint256[][],bool,bool)": FunctionFragment;
    "claimAndMintNextAndAddAuthMethodsWithTypes(uint256,bytes32,(bytes32,bytes32,uint8)[],address[],uint256[][],uint256[],bytes[],bytes[],uint256[][],bool,bool)": FunctionFragment;
    "contractResolver()": FunctionFragment;
    "env()": FunctionFragment;
    "getDomainWalletRegistry()": FunctionFragment;
    "getPKPNftMetdataAddress()": FunctionFragment;
    "getPkpNftAddress()": FunctionFragment;
    "getPkpPermissionsAddress()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "mintNextAndAddAuthMethods(uint256,uint256[],bytes[],bytes[],uint256[][],bool,bool)": FunctionFragment;
    "mintNextAndAddAuthMethodsWithTypes(uint256,bytes[],uint256[][],address[],uint256[][],uint256[],bytes[],bytes[],uint256[][],bool,bool)": FunctionFragment;
    "mintNextAndAddDomainWalletMetadata(uint256,uint256[],bytes[],bytes[],uint256[][],string[],bool,bool)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "removePkpMetadata(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setContractResolver(address)": FunctionFragment;
    "setPkpMetadata(uint256,string[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "claimAndMintNextAndAddAuthMethods"
      | "claimAndMintNextAndAddAuthMethodsWithTypes"
      | "contractResolver"
      | "env"
      | "getDomainWalletRegistry"
      | "getPKPNftMetdataAddress"
      | "getPkpNftAddress"
      | "getPkpPermissionsAddress"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "mintNextAndAddAuthMethods"
      | "mintNextAndAddAuthMethodsWithTypes"
      | "mintNextAndAddDomainWalletMetadata"
      | "onERC721Received"
      | "owner"
      | "removePkpMetadata"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeRole"
      | "setContractResolver"
      | "setPkpMetadata"
      | "supportsInterface"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimAndMintNextAndAddAuthMethods",
    values: [
      BigNumberish,
      BytesLike,
      IPubkeyRouter.SignatureStruct[],
      BigNumberish[],
      BytesLike[],
      BytesLike[],
      BigNumberish[][],
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAndMintNextAndAddAuthMethodsWithTypes",
    values: [
      BigNumberish,
      BytesLike,
      IPubkeyRouter.SignatureStruct[],
      string[],
      BigNumberish[][],
      BigNumberish[],
      BytesLike[],
      BytesLike[],
      BigNumberish[][],
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "contractResolver",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "env", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDomainWalletRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPKPNftMetdataAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPkpNftAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPkpPermissionsAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNextAndAddAuthMethods",
    values: [
      BigNumberish,
      BigNumberish[],
      BytesLike[],
      BytesLike[],
      BigNumberish[][],
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNextAndAddAuthMethodsWithTypes",
    values: [
      BigNumberish,
      BytesLike[],
      BigNumberish[][],
      string[],
      BigNumberish[][],
      BigNumberish[],
      BytesLike[],
      BytesLike[],
      BigNumberish[][],
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNextAndAddDomainWalletMetadata",
    values: [
      BigNumberish,
      BigNumberish[],
      BytesLike[],
      BytesLike[],
      BigNumberish[][],
      string[],
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removePkpMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractResolver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPkpMetadata",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAndMintNextAndAddAuthMethods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAndMintNextAndAddAuthMethodsWithTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "env", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDomainWalletRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPKPNftMetdataAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPkpNftAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPkpPermissionsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintNextAndAddAuthMethods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintNextAndAddAuthMethodsWithTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintNextAndAddDomainWalletMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePkpMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContractResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPkpMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ContractResolverAddressSet(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractResolverAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface ContractResolverAddressSetEventObject {
  newResolverAddress: string;
}
export type ContractResolverAddressSetEvent = TypedEvent<
  [string],
  ContractResolverAddressSetEventObject
>;

export type ContractResolverAddressSetEventFilter =
  TypedEventFilter<ContractResolverAddressSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface PKPHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PKPHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    claimAndMintNextAndAddAuthMethods(
      keyType: BigNumberish,
      derivedKeyId: BytesLike,
      signatures: IPubkeyRouter.SignatureStruct[],
      permittedAuthMethodTypes: BigNumberish[],
      permittedAuthMethodIds: BytesLike[],
      permittedAuthMethodPubkeys: BytesLike[],
      permittedAuthMethodScopes: BigNumberish[][],
      addPkpEthAddressAsPermittedAddress: boolean,
      sendPkpToItself: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimAndMintNextAndAddAuthMethodsWithTypes(
      keyType: BigNumberish,
      derivedKeyId: BytesLike,
      signatures: IPubkeyRouter.SignatureStruct[],
      permittedAddresses: string[],
      permittedAddressScopes: BigNumberish[][],
      permittedAuthMethodTypes: BigNumberish[],
      permittedAuthMethodIds: BytesLike[],
      permittedAuthMethodPubkeys: BytesLike[],
      permittedAuthMethodScopes: BigNumberish[][],
      addPkpEthAddressAsPermittedAddress: boolean,
      sendPkpToItself: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    contractResolver(overrides?: CallOverrides): Promise<[string]>;

    env(overrides?: CallOverrides): Promise<[number]>;

    getDomainWalletRegistry(overrides?: CallOverrides): Promise<[string]>;

    getPKPNftMetdataAddress(overrides?: CallOverrides): Promise<[string]>;

    getPkpNftAddress(overrides?: CallOverrides): Promise<[string]>;

    getPkpPermissionsAddress(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintNextAndAddAuthMethods(
      keyType: BigNumberish,
      permittedAuthMethodTypes: BigNumberish[],
      permittedAuthMethodIds: BytesLike[],
      permittedAuthMethodPubkeys: BytesLike[],
      permittedAuthMethodScopes: BigNumberish[][],
      addPkpEthAddressAsPermittedAddress: boolean,
      sendPkpToItself: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    mintNextAndAddAuthMethodsWithTypes(
      keyType: BigNumberish,
      permittedIpfsCIDs: BytesLike[],
      permittedIpfsCIDScopes: BigNumberish[][],
      permittedAddresses: string[],
      permittedAddressScopes: BigNumberish[][],
      permittedAuthMethodTypes: BigNumberish[],
      permittedAuthMethodIds: BytesLike[],
      permittedAuthMethodPubkeys: BytesLike[],
      permittedAuthMethodScopes: BigNumberish[][],
      addPkpEthAddressAsPermittedAddress: boolean,
      sendPkpToItself: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    mintNextAndAddDomainWalletMetadata(
      keyType: BigNumberish,
      permittedAuthMethodTypes: BigNumberish[],
      permittedAuthMethodIds: BytesLike[],
      permittedAuthMethodPubkeys: BytesLike[],
      permittedAuthMethodScopes: BigNumberish[][],
      nftMetadata: string[],
      addPkpEthAddressAsPermittedAddress: boolean,
      sendPkpToItself: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removePkpMetadata(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setContractResolver(
      newResolverAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPkpMetadata(
      tokenId: BigNumberish,
      nftMetadata: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  claimAndMintNextAndAddAuthMethods(
    keyType: BigNumberish,
    derivedKeyId: BytesLike,
    signatures: IPubkeyRouter.SignatureStruct[],
    permittedAuthMethodTypes: BigNumberish[],
    permittedAuthMethodIds: BytesLike[],
    permittedAuthMethodPubkeys: BytesLike[],
    permittedAuthMethodScopes: BigNumberish[][],
    addPkpEthAddressAsPermittedAddress: boolean,
    sendPkpToItself: boolean,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimAndMintNextAndAddAuthMethodsWithTypes(
    keyType: BigNumberish,
    derivedKeyId: BytesLike,
    signatures: IPubkeyRouter.SignatureStruct[],
    permittedAddresses: string[],
    permittedAddressScopes: BigNumberish[][],
    permittedAuthMethodTypes: BigNumberish[],
    permittedAuthMethodIds: BytesLike[],
    permittedAuthMethodPubkeys: BytesLike[],
    permittedAuthMethodScopes: BigNumberish[][],
    addPkpEthAddressAsPermittedAddress: boolean,
    sendPkpToItself: boolean,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  contractResolver(overrides?: CallOverrides): Promise<string>;

  env(overrides?: CallOverrides): Promise<number>;

  getDomainWalletRegistry(overrides?: CallOverrides): Promise<string>;

  getPKPNftMetdataAddress(overrides?: CallOverrides): Promise<string>;

  getPkpNftAddress(overrides?: CallOverrides): Promise<string>;

  getPkpPermissionsAddress(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintNextAndAddAuthMethods(
    keyType: BigNumberish,
    permittedAuthMethodTypes: BigNumberish[],
    permittedAuthMethodIds: BytesLike[],
    permittedAuthMethodPubkeys: BytesLike[],
    permittedAuthMethodScopes: BigNumberish[][],
    addPkpEthAddressAsPermittedAddress: boolean,
    sendPkpToItself: boolean,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  mintNextAndAddAuthMethodsWithTypes(
    keyType: BigNumberish,
    permittedIpfsCIDs: BytesLike[],
    permittedIpfsCIDScopes: BigNumberish[][],
    permittedAddresses: string[],
    permittedAddressScopes: BigNumberish[][],
    permittedAuthMethodTypes: BigNumberish[],
    permittedAuthMethodIds: BytesLike[],
    permittedAuthMethodPubkeys: BytesLike[],
    permittedAuthMethodScopes: BigNumberish[][],
    addPkpEthAddressAsPermittedAddress: boolean,
    sendPkpToItself: boolean,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  mintNextAndAddDomainWalletMetadata(
    keyType: BigNumberish,
    permittedAuthMethodTypes: BigNumberish[],
    permittedAuthMethodIds: BytesLike[],
    permittedAuthMethodPubkeys: BytesLike[],
    permittedAuthMethodScopes: BigNumberish[][],
    nftMetadata: string[],
    addPkpEthAddressAsPermittedAddress: boolean,
    sendPkpToItself: boolean,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  removePkpMetadata(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setContractResolver(
    newResolverAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPkpMetadata(
    tokenId: BigNumberish,
    nftMetadata: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    claimAndMintNextAndAddAuthMethods(
      keyType: BigNumberish,
      derivedKeyId: BytesLike,
      signatures: IPubkeyRouter.SignatureStruct[],
      permittedAuthMethodTypes: BigNumberish[],
      permittedAuthMethodIds: BytesLike[],
      permittedAuthMethodPubkeys: BytesLike[],
      permittedAuthMethodScopes: BigNumberish[][],
      addPkpEthAddressAsPermittedAddress: boolean,
      sendPkpToItself: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAndMintNextAndAddAuthMethodsWithTypes(
      keyType: BigNumberish,
      derivedKeyId: BytesLike,
      signatures: IPubkeyRouter.SignatureStruct[],
      permittedAddresses: string[],
      permittedAddressScopes: BigNumberish[][],
      permittedAuthMethodTypes: BigNumberish[],
      permittedAuthMethodIds: BytesLike[],
      permittedAuthMethodPubkeys: BytesLike[],
      permittedAuthMethodScopes: BigNumberish[][],
      addPkpEthAddressAsPermittedAddress: boolean,
      sendPkpToItself: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractResolver(overrides?: CallOverrides): Promise<string>;

    env(overrides?: CallOverrides): Promise<number>;

    getDomainWalletRegistry(overrides?: CallOverrides): Promise<string>;

    getPKPNftMetdataAddress(overrides?: CallOverrides): Promise<string>;

    getPkpNftAddress(overrides?: CallOverrides): Promise<string>;

    getPkpPermissionsAddress(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintNextAndAddAuthMethods(
      keyType: BigNumberish,
      permittedAuthMethodTypes: BigNumberish[],
      permittedAuthMethodIds: BytesLike[],
      permittedAuthMethodPubkeys: BytesLike[],
      permittedAuthMethodScopes: BigNumberish[][],
      addPkpEthAddressAsPermittedAddress: boolean,
      sendPkpToItself: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintNextAndAddAuthMethodsWithTypes(
      keyType: BigNumberish,
      permittedIpfsCIDs: BytesLike[],
      permittedIpfsCIDScopes: BigNumberish[][],
      permittedAddresses: string[],
      permittedAddressScopes: BigNumberish[][],
      permittedAuthMethodTypes: BigNumberish[],
      permittedAuthMethodIds: BytesLike[],
      permittedAuthMethodPubkeys: BytesLike[],
      permittedAuthMethodScopes: BigNumberish[][],
      addPkpEthAddressAsPermittedAddress: boolean,
      sendPkpToItself: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintNextAndAddDomainWalletMetadata(
      keyType: BigNumberish,
      permittedAuthMethodTypes: BigNumberish[],
      permittedAuthMethodIds: BytesLike[],
      permittedAuthMethodPubkeys: BytesLike[],
      permittedAuthMethodScopes: BigNumberish[][],
      nftMetadata: string[],
      addPkpEthAddressAsPermittedAddress: boolean,
      sendPkpToItself: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    removePkpMetadata(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractResolver(
      newResolverAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPkpMetadata(
      tokenId: BigNumberish,
      nftMetadata: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ContractResolverAddressSet(address)"(
      newResolverAddress?: null
    ): ContractResolverAddressSetEventFilter;
    ContractResolverAddressSet(
      newResolverAddress?: null
    ): ContractResolverAddressSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    claimAndMintNextAndAddAuthMethods(
      keyType: BigNumberish,
      derivedKeyId: BytesLike,
      signatures: IPubkeyRouter.SignatureStruct[],
      permittedAuthMethodTypes: BigNumberish[],
      permittedAuthMethodIds: BytesLike[],
      permittedAuthMethodPubkeys: BytesLike[],
      permittedAuthMethodScopes: BigNumberish[][],
      addPkpEthAddressAsPermittedAddress: boolean,
      sendPkpToItself: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    claimAndMintNextAndAddAuthMethodsWithTypes(
      keyType: BigNumberish,
      derivedKeyId: BytesLike,
      signatures: IPubkeyRouter.SignatureStruct[],
      permittedAddresses: string[],
      permittedAddressScopes: BigNumberish[][],
      permittedAuthMethodTypes: BigNumberish[],
      permittedAuthMethodIds: BytesLike[],
      permittedAuthMethodPubkeys: BytesLike[],
      permittedAuthMethodScopes: BigNumberish[][],
      addPkpEthAddressAsPermittedAddress: boolean,
      sendPkpToItself: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    contractResolver(overrides?: CallOverrides): Promise<BigNumber>;

    env(overrides?: CallOverrides): Promise<BigNumber>;

    getDomainWalletRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getPKPNftMetdataAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getPkpNftAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getPkpPermissionsAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintNextAndAddAuthMethods(
      keyType: BigNumberish,
      permittedAuthMethodTypes: BigNumberish[],
      permittedAuthMethodIds: BytesLike[],
      permittedAuthMethodPubkeys: BytesLike[],
      permittedAuthMethodScopes: BigNumberish[][],
      addPkpEthAddressAsPermittedAddress: boolean,
      sendPkpToItself: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    mintNextAndAddAuthMethodsWithTypes(
      keyType: BigNumberish,
      permittedIpfsCIDs: BytesLike[],
      permittedIpfsCIDScopes: BigNumberish[][],
      permittedAddresses: string[],
      permittedAddressScopes: BigNumberish[][],
      permittedAuthMethodTypes: BigNumberish[],
      permittedAuthMethodIds: BytesLike[],
      permittedAuthMethodPubkeys: BytesLike[],
      permittedAuthMethodScopes: BigNumberish[][],
      addPkpEthAddressAsPermittedAddress: boolean,
      sendPkpToItself: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    mintNextAndAddDomainWalletMetadata(
      keyType: BigNumberish,
      permittedAuthMethodTypes: BigNumberish[],
      permittedAuthMethodIds: BytesLike[],
      permittedAuthMethodPubkeys: BytesLike[],
      permittedAuthMethodScopes: BigNumberish[][],
      nftMetadata: string[],
      addPkpEthAddressAsPermittedAddress: boolean,
      sendPkpToItself: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removePkpMetadata(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setContractResolver(
      newResolverAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPkpMetadata(
      tokenId: BigNumberish,
      nftMetadata: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimAndMintNextAndAddAuthMethods(
      keyType: BigNumberish,
      derivedKeyId: BytesLike,
      signatures: IPubkeyRouter.SignatureStruct[],
      permittedAuthMethodTypes: BigNumberish[],
      permittedAuthMethodIds: BytesLike[],
      permittedAuthMethodPubkeys: BytesLike[],
      permittedAuthMethodScopes: BigNumberish[][],
      addPkpEthAddressAsPermittedAddress: boolean,
      sendPkpToItself: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimAndMintNextAndAddAuthMethodsWithTypes(
      keyType: BigNumberish,
      derivedKeyId: BytesLike,
      signatures: IPubkeyRouter.SignatureStruct[],
      permittedAddresses: string[],
      permittedAddressScopes: BigNumberish[][],
      permittedAuthMethodTypes: BigNumberish[],
      permittedAuthMethodIds: BytesLike[],
      permittedAuthMethodPubkeys: BytesLike[],
      permittedAuthMethodScopes: BigNumberish[][],
      addPkpEthAddressAsPermittedAddress: boolean,
      sendPkpToItself: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    contractResolver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    env(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDomainWalletRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPKPNftMetdataAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPkpNftAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPkpPermissionsAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintNextAndAddAuthMethods(
      keyType: BigNumberish,
      permittedAuthMethodTypes: BigNumberish[],
      permittedAuthMethodIds: BytesLike[],
      permittedAuthMethodPubkeys: BytesLike[],
      permittedAuthMethodScopes: BigNumberish[][],
      addPkpEthAddressAsPermittedAddress: boolean,
      sendPkpToItself: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mintNextAndAddAuthMethodsWithTypes(
      keyType: BigNumberish,
      permittedIpfsCIDs: BytesLike[],
      permittedIpfsCIDScopes: BigNumberish[][],
      permittedAddresses: string[],
      permittedAddressScopes: BigNumberish[][],
      permittedAuthMethodTypes: BigNumberish[],
      permittedAuthMethodIds: BytesLike[],
      permittedAuthMethodPubkeys: BytesLike[],
      permittedAuthMethodScopes: BigNumberish[][],
      addPkpEthAddressAsPermittedAddress: boolean,
      sendPkpToItself: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mintNextAndAddDomainWalletMetadata(
      keyType: BigNumberish,
      permittedAuthMethodTypes: BigNumberish[],
      permittedAuthMethodIds: BytesLike[],
      permittedAuthMethodPubkeys: BytesLike[],
      permittedAuthMethodScopes: BigNumberish[][],
      nftMetadata: string[],
      addPkpEthAddressAsPermittedAddress: boolean,
      sendPkpToItself: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removePkpMetadata(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setContractResolver(
      newResolverAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPkpMetadata(
      tokenId: BigNumberish,
      nftMetadata: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
