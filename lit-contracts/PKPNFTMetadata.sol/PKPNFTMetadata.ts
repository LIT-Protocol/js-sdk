/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common';

export interface PKPNFTMetadataInterface extends utils.Interface {
  functions: {
    'ADMIN_ROLE()': FunctionFragment;
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'WRITER_ROLE()': FunctionFragment;
    'bytesToHex(bytes)': FunctionFragment;
    'contractResolver()': FunctionFragment;
    'env()': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'removeProfileForPkp(uint256)': FunctionFragment;
    'removeUrlForPKP(uint256)': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'setPKPHelperWriterAddress(address)': FunctionFragment;
    'setProfileForPKP(uint256,string)': FunctionFragment;
    'setUrlForPKP(uint256,string)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'tokenURI(uint256,bytes,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'ADMIN_ROLE'
      | 'DEFAULT_ADMIN_ROLE'
      | 'WRITER_ROLE'
      | 'bytesToHex'
      | 'contractResolver'
      | 'env'
      | 'getRoleAdmin'
      | 'grantRole'
      | 'hasRole'
      | 'removeProfileForPkp'
      | 'removeUrlForPKP'
      | 'renounceRole'
      | 'revokeRole'
      | 'setPKPHelperWriterAddress'
      | 'setProfileForPKP'
      | 'setUrlForPKP'
      | 'supportsInterface'
      | 'tokenURI'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'ADMIN_ROLE',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'WRITER_ROLE',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'bytesToHex',
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'contractResolver',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'env', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getRoleAdmin',
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'hasRole',
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeProfileForPkp',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeUrlForPKP',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'setPKPHelperWriterAddress',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'setProfileForPKP',
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'setUrlForPKP',
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'tokenURI',
    values: [BigNumberish, BytesLike, string]
  ): string;

  decodeFunctionResult(functionFragment: 'ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'WRITER_ROLE',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'bytesToHex', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'contractResolver',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'env', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getRoleAdmin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'removeProfileForPkp',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeUrlForPKP',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceRole',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setPKPHelperWriterAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setProfileForPKP',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setUrlForPKP',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result;

  events: {
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
}

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface PKPNFTMetadata extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PKPNFTMetadataInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    WRITER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    bytesToHex(buffer: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    contractResolver(overrides?: CallOverrides): Promise<[string]>;

    env(overrides?: CallOverrides): Promise<[number]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeProfileForPkp(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeUrlForPKP(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPKPHelperWriterAddress(
      pkpHelperWriterAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setProfileForPKP(
      tokenId: BigNumberish,
      imgUrl: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setUrlForPKP(
      tokenId: BigNumberish,
      url: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenURI(
      tokenId: BigNumberish,
      pubKey: BytesLike,
      ethAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  WRITER_ROLE(overrides?: CallOverrides): Promise<string>;

  bytesToHex(buffer: BytesLike, overrides?: CallOverrides): Promise<string>;

  contractResolver(overrides?: CallOverrides): Promise<string>;

  env(overrides?: CallOverrides): Promise<number>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeProfileForPkp(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeUrlForPKP(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPKPHelperWriterAddress(
    pkpHelperWriterAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setProfileForPKP(
    tokenId: BigNumberish,
    imgUrl: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setUrlForPKP(
    tokenId: BigNumberish,
    url: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenURI(
    tokenId: BigNumberish,
    pubKey: BytesLike,
    ethAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    WRITER_ROLE(overrides?: CallOverrides): Promise<string>;

    bytesToHex(buffer: BytesLike, overrides?: CallOverrides): Promise<string>;

    contractResolver(overrides?: CallOverrides): Promise<string>;

    env(overrides?: CallOverrides): Promise<number>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeProfileForPkp(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeUrlForPKP(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPKPHelperWriterAddress(
      pkpHelperWriterAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProfileForPKP(
      tokenId: BigNumberish,
      imgUrl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUrlForPKP(
      tokenId: BigNumberish,
      url: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenURI(
      tokenId: BigNumberish,
      pubKey: BytesLike,
      ethAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    WRITER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    bytesToHex(
      buffer: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractResolver(overrides?: CallOverrides): Promise<BigNumber>;

    env(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeProfileForPkp(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeUrlForPKP(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPKPHelperWriterAddress(
      pkpHelperWriterAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setProfileForPKP(
      tokenId: BigNumberish,
      imgUrl: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setUrlForPKP(
      tokenId: BigNumberish,
      url: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      pubKey: BytesLike,
      ethAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WRITER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bytesToHex(
      buffer: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractResolver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    env(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeProfileForPkp(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeUrlForPKP(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPKPHelperWriterAddress(
      pkpHelperWriterAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setProfileForPKP(
      tokenId: BigNumberish,
      imgUrl: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setUrlForPKP(
      tokenId: BigNumberish,
      url: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      pubKey: BytesLike,
      ethAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
