/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface RateLimitNFTInterface extends utils.Interface {
  functions: {
    "RLIHolderRateLimitWindowSeconds()": FunctionFragment;
    "additionalRequestsPerKilosecondCost()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "calculateCost(uint256,uint256)": FunctionFragment;
    "calculateRequestsPerKilosecond(uint256,uint256)": FunctionFragment;
    "capacity(uint256)": FunctionFragment;
    "defaultRateLimitWindowSeconds()": FunctionFragment;
    "freeMint(uint256,uint256,bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "freeMintSigTest(uint256,uint256,bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "freeMintSigner()": FunctionFragment;
    "freeRequestsPerRateLimitWindow()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isExpired(uint256)": FunctionFragment;
    "mint(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "prefixed(bytes32)": FunctionFragment;
    "redeemedFreeMints(bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setAdditionalRequestsPerKilosecondCost(uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setFreeMintSigner(address)": FunctionFragment;
    "setFreeRequestsPerRateLimitWindow(uint256)": FunctionFragment;
    "setRLIHolderRateLimitWindowSeconds(uint256)": FunctionFragment;
    "setRateLimitWindowSeconds(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenIdCounter()": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "RLIHolderRateLimitWindowSeconds"
      | "additionalRequestsPerKilosecondCost"
      | "approve"
      | "balanceOf"
      | "burn"
      | "calculateCost"
      | "calculateRequestsPerKilosecond"
      | "capacity"
      | "defaultRateLimitWindowSeconds"
      | "freeMint"
      | "freeMintSigTest"
      | "freeMintSigner"
      | "freeRequestsPerRateLimitWindow"
      | "getApproved"
      | "isApprovedForAll"
      | "isExpired"
      | "mint"
      | "name"
      | "owner"
      | "ownerOf"
      | "prefixed"
      | "redeemedFreeMints"
      | "renounceOwnership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setAdditionalRequestsPerKilosecondCost"
      | "setApprovalForAll"
      | "setFreeMintSigner"
      | "setFreeRequestsPerRateLimitWindow"
      | "setRLIHolderRateLimitWindowSeconds"
      | "setRateLimitWindowSeconds"
      | "supportsInterface"
      | "symbol"
      | "tokenByIndex"
      | "tokenIdCounter"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "RLIHolderRateLimitWindowSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "additionalRequestsPerKilosecondCost",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "calculateCost",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRequestsPerKilosecond",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "capacity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultRateLimitWindowSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "freeMint",
    values: [
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "freeMintSigTest",
    values: [
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "freeMintSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "freeRequestsPerRateLimitWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isExpired",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "prefixed", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "redeemedFreeMints",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdditionalRequestsPerKilosecondCost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFreeMintSigner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFreeRequestsPerRateLimitWindow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRLIHolderRateLimitWindowSeconds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRateLimitWindowSeconds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "RLIHolderRateLimitWindowSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "additionalRequestsPerKilosecondCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRequestsPerKilosecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "capacity", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultRateLimitWindowSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "freeMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freeMintSigTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freeMintSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freeRequestsPerRateLimitWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isExpired", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prefixed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemedFreeMints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdditionalRequestsPerKilosecondCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFreeMintSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFreeRequestsPerRateLimitWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRLIHolderRateLimitWindowSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRateLimitWindowSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AdditionalRequestsPerKilosecondCostSet(uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "FreeMintSignerSet(address)": EventFragment;
    "FreeRequestsPerRateLimitWindowSet(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RLIHolderRateLimitWindowSecondsSet(uint256)": EventFragment;
    "RateLimitWindowSecondsSet(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdrew(uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AdditionalRequestsPerKilosecondCostSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FreeMintSignerSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FreeRequestsPerRateLimitWindowSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RLIHolderRateLimitWindowSecondsSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RateLimitWindowSecondsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrew"): EventFragment;
}

export interface AdditionalRequestsPerKilosecondCostSetEventObject {
  newAdditionalRequestsPerKilosecondCost: BigNumber;
}
export type AdditionalRequestsPerKilosecondCostSetEvent = TypedEvent<
  [BigNumber],
  AdditionalRequestsPerKilosecondCostSetEventObject
>;

export type AdditionalRequestsPerKilosecondCostSetEventFilter =
  TypedEventFilter<AdditionalRequestsPerKilosecondCostSetEvent>;

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface FreeMintSignerSetEventObject {
  newFreeMintSigner: string;
}
export type FreeMintSignerSetEvent = TypedEvent<
  [string],
  FreeMintSignerSetEventObject
>;

export type FreeMintSignerSetEventFilter =
  TypedEventFilter<FreeMintSignerSetEvent>;

export interface FreeRequestsPerRateLimitWindowSetEventObject {
  newFreeRequestsPerRateLimitWindow: BigNumber;
}
export type FreeRequestsPerRateLimitWindowSetEvent = TypedEvent<
  [BigNumber],
  FreeRequestsPerRateLimitWindowSetEventObject
>;

export type FreeRequestsPerRateLimitWindowSetEventFilter =
  TypedEventFilter<FreeRequestsPerRateLimitWindowSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RLIHolderRateLimitWindowSecondsSetEventObject {
  newRLIHolderRateLimitWindowSeconds: BigNumber;
}
export type RLIHolderRateLimitWindowSecondsSetEvent = TypedEvent<
  [BigNumber],
  RLIHolderRateLimitWindowSecondsSetEventObject
>;

export type RLIHolderRateLimitWindowSecondsSetEventFilter =
  TypedEventFilter<RLIHolderRateLimitWindowSecondsSetEvent>;

export interface RateLimitWindowSecondsSetEventObject {
  newRateLimitWindowSeconds: BigNumber;
}
export type RateLimitWindowSecondsSetEvent = TypedEvent<
  [BigNumber],
  RateLimitWindowSecondsSetEventObject
>;

export type RateLimitWindowSecondsSetEventFilter =
  TypedEventFilter<RateLimitWindowSecondsSetEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrewEventObject {
  amount: BigNumber;
}
export type WithdrewEvent = TypedEvent<[BigNumber], WithdrewEventObject>;

export type WithdrewEventFilter = TypedEventFilter<WithdrewEvent>;

export interface RateLimitNFT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RateLimitNFTInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    RLIHolderRateLimitWindowSeconds(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    additionalRequestsPerKilosecondCost(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    calculateCost(
      requestsPerKilosecond: BigNumberish,
      expiresAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateRequestsPerKilosecond(
      payingAmount: BigNumberish,
      expiresAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    capacity(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        requestsPerKilosecond: BigNumber;
        expiresAt: BigNumber;
      }
    >;

    defaultRateLimitWindowSeconds(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    freeMint(
      expiresAt: BigNumberish,
      requestsPerKilosecond: BigNumberish,
      msgHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    freeMintSigTest(
      expiresAt: BigNumberish,
      requestsPerKilosecond: BigNumberish,
      msgHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    freeMintSigner(overrides?: CallOverrides): Promise<[string]>;

    freeRequestsPerRateLimitWindow(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isExpired(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      expiresAt: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    prefixed(hash: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    redeemedFreeMints(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAdditionalRequestsPerKilosecondCost(
      newAdditionalRequestsPerKilosecondCost: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFreeMintSigner(
      newFreeMintSigner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFreeRequestsPerRateLimitWindow(
      newFreeRequestsPerRateLimitWindow: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRLIHolderRateLimitWindowSeconds(
      newRLIHolderRateLimitWindowSeconds: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRateLimitWindowSeconds(
      newRateLimitWindowSeconds: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenIdCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  RLIHolderRateLimitWindowSeconds(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  additionalRequestsPerKilosecondCost(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  calculateCost(
    requestsPerKilosecond: BigNumberish,
    expiresAt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateRequestsPerKilosecond(
    payingAmount: BigNumberish,
    expiresAt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  capacity(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      requestsPerKilosecond: BigNumber;
      expiresAt: BigNumber;
    }
  >;

  defaultRateLimitWindowSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  freeMint(
    expiresAt: BigNumberish,
    requestsPerKilosecond: BigNumberish,
    msgHash: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  freeMintSigTest(
    expiresAt: BigNumberish,
    requestsPerKilosecond: BigNumberish,
    msgHash: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  freeMintSigner(overrides?: CallOverrides): Promise<string>;

  freeRequestsPerRateLimitWindow(overrides?: CallOverrides): Promise<BigNumber>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isExpired(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  mint(
    expiresAt: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  prefixed(hash: BytesLike, overrides?: CallOverrides): Promise<string>;

  redeemedFreeMints(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAdditionalRequestsPerKilosecondCost(
    newAdditionalRequestsPerKilosecondCost: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFreeMintSigner(
    newFreeMintSigner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFreeRequestsPerRateLimitWindow(
    newFreeRequestsPerRateLimitWindow: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRLIHolderRateLimitWindowSeconds(
    newRLIHolderRateLimitWindowSeconds: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRateLimitWindowSeconds(
    newRateLimitWindowSeconds: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    RLIHolderRateLimitWindowSeconds(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    additionalRequestsPerKilosecondCost(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    calculateCost(
      requestsPerKilosecond: BigNumberish,
      expiresAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRequestsPerKilosecond(
      payingAmount: BigNumberish,
      expiresAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    capacity(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        requestsPerKilosecond: BigNumber;
        expiresAt: BigNumber;
      }
    >;

    defaultRateLimitWindowSeconds(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    freeMint(
      expiresAt: BigNumberish,
      requestsPerKilosecond: BigNumberish,
      msgHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    freeMintSigTest(
      expiresAt: BigNumberish,
      requestsPerKilosecond: BigNumberish,
      msgHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    freeMintSigner(overrides?: CallOverrides): Promise<string>;

    freeRequestsPerRateLimitWindow(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExpired(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      expiresAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    prefixed(hash: BytesLike, overrides?: CallOverrides): Promise<string>;

    redeemedFreeMints(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdditionalRequestsPerKilosecondCost(
      newAdditionalRequestsPerKilosecondCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setFreeMintSigner(
      newFreeMintSigner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFreeRequestsPerRateLimitWindow(
      newFreeRequestsPerRateLimitWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRLIHolderRateLimitWindowSeconds(
      newRLIHolderRateLimitWindowSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRateLimitWindowSeconds(
      newRateLimitWindowSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AdditionalRequestsPerKilosecondCostSet(uint256)"(
      newAdditionalRequestsPerKilosecondCost?: null
    ): AdditionalRequestsPerKilosecondCostSetEventFilter;
    AdditionalRequestsPerKilosecondCostSet(
      newAdditionalRequestsPerKilosecondCost?: null
    ): AdditionalRequestsPerKilosecondCostSetEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "FreeMintSignerSet(address)"(
      newFreeMintSigner?: string | null
    ): FreeMintSignerSetEventFilter;
    FreeMintSignerSet(
      newFreeMintSigner?: string | null
    ): FreeMintSignerSetEventFilter;

    "FreeRequestsPerRateLimitWindowSet(uint256)"(
      newFreeRequestsPerRateLimitWindow?: null
    ): FreeRequestsPerRateLimitWindowSetEventFilter;
    FreeRequestsPerRateLimitWindowSet(
      newFreeRequestsPerRateLimitWindow?: null
    ): FreeRequestsPerRateLimitWindowSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RLIHolderRateLimitWindowSecondsSet(uint256)"(
      newRLIHolderRateLimitWindowSeconds?: null
    ): RLIHolderRateLimitWindowSecondsSetEventFilter;
    RLIHolderRateLimitWindowSecondsSet(
      newRLIHolderRateLimitWindowSeconds?: null
    ): RLIHolderRateLimitWindowSecondsSetEventFilter;

    "RateLimitWindowSecondsSet(uint256)"(
      newRateLimitWindowSeconds?: null
    ): RateLimitWindowSecondsSetEventFilter;
    RateLimitWindowSecondsSet(
      newRateLimitWindowSeconds?: null
    ): RateLimitWindowSecondsSetEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;

    "Withdrew(uint256)"(amount?: null): WithdrewEventFilter;
    Withdrew(amount?: null): WithdrewEventFilter;
  };

  estimateGas: {
    RLIHolderRateLimitWindowSeconds(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    additionalRequestsPerKilosecondCost(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    calculateCost(
      requestsPerKilosecond: BigNumberish,
      expiresAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRequestsPerKilosecond(
      payingAmount: BigNumberish,
      expiresAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    capacity(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    defaultRateLimitWindowSeconds(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    freeMint(
      expiresAt: BigNumberish,
      requestsPerKilosecond: BigNumberish,
      msgHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    freeMintSigTest(
      expiresAt: BigNumberish,
      requestsPerKilosecond: BigNumberish,
      msgHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    freeMintSigner(overrides?: CallOverrides): Promise<BigNumber>;

    freeRequestsPerRateLimitWindow(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExpired(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      expiresAt: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prefixed(hash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    redeemedFreeMints(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAdditionalRequestsPerKilosecondCost(
      newAdditionalRequestsPerKilosecondCost: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFreeMintSigner(
      newFreeMintSigner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFreeRequestsPerRateLimitWindow(
      newFreeRequestsPerRateLimitWindow: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRLIHolderRateLimitWindowSeconds(
      newRLIHolderRateLimitWindowSeconds: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRateLimitWindowSeconds(
      newRateLimitWindowSeconds: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdraw(overrides?: Overrides & { from?: string }): Promise<BigNumber>;
  };

  populateTransaction: {
    RLIHolderRateLimitWindowSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    additionalRequestsPerKilosecondCost(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    calculateCost(
      requestsPerKilosecond: BigNumberish,
      expiresAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRequestsPerKilosecond(
      payingAmount: BigNumberish,
      expiresAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    capacity(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultRateLimitWindowSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    freeMint(
      expiresAt: BigNumberish,
      requestsPerKilosecond: BigNumberish,
      msgHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    freeMintSigTest(
      expiresAt: BigNumberish,
      requestsPerKilosecond: BigNumberish,
      msgHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    freeMintSigner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    freeRequestsPerRateLimitWindow(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExpired(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      expiresAt: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prefixed(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemedFreeMints(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAdditionalRequestsPerKilosecondCost(
      newAdditionalRequestsPerKilosecondCost: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFreeMintSigner(
      newFreeMintSigner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFreeRequestsPerRateLimitWindow(
      newFreeRequestsPerRateLimitWindow: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRLIHolderRateLimitWindowSeconds(
      newRLIHolderRateLimitWindowSeconds: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRateLimitWindowSeconds(
      newRateLimitWindowSeconds: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIdCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
