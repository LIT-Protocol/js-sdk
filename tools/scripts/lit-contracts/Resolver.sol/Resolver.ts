/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ResolverInterface extends utils.Interface {
  functions: {
    "ADMIN_ROLE()": FunctionFragment;
    "ALLOWLIST_CONTRACT()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "DOMAIN_WALLET_ORACLE()": FunctionFragment;
    "DOMAIN_WALLET_REGISTRY()": FunctionFragment;
    "HD_KEY_DERIVER_CONTRACT()": FunctionFragment;
    "LIT_TOKEN_CONTRACT()": FunctionFragment;
    "MULTI_SENDER_CONTRACT()": FunctionFragment;
    "PKP_HELPER_CONTRACT()": FunctionFragment;
    "PKP_NFT_CONTRACT()": FunctionFragment;
    "PKP_NFT_METADATA_CONTRACT()": FunctionFragment;
    "PKP_PERMISSIONS_CONTRACT()": FunctionFragment;
    "PUB_KEY_ROUTER_CONTRACT()": FunctionFragment;
    "RATE_LIMIT_NFT_CONTRACT()": FunctionFragment;
    "RELEASE_REGISTER_CONTRACT()": FunctionFragment;
    "STAKING_BALANCES_CONTRACT()": FunctionFragment;
    "STAKING_CONTRACT()": FunctionFragment;
    "addAllowedEnv(uint8)": FunctionFragment;
    "getContract(bytes32,uint8)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "removeAllowedEnv(uint8)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setContract(bytes32,uint8,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "typeAddresses(bytes32,uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADMIN_ROLE"
      | "ALLOWLIST_CONTRACT"
      | "DEFAULT_ADMIN_ROLE"
      | "DOMAIN_WALLET_ORACLE"
      | "DOMAIN_WALLET_REGISTRY"
      | "HD_KEY_DERIVER_CONTRACT"
      | "LIT_TOKEN_CONTRACT"
      | "MULTI_SENDER_CONTRACT"
      | "PKP_HELPER_CONTRACT"
      | "PKP_NFT_CONTRACT"
      | "PKP_NFT_METADATA_CONTRACT"
      | "PKP_PERMISSIONS_CONTRACT"
      | "PUB_KEY_ROUTER_CONTRACT"
      | "RATE_LIMIT_NFT_CONTRACT"
      | "RELEASE_REGISTER_CONTRACT"
      | "STAKING_BALANCES_CONTRACT"
      | "STAKING_CONTRACT"
      | "addAllowedEnv"
      | "getContract"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "removeAllowedEnv"
      | "renounceRole"
      | "revokeRole"
      | "setAdmin"
      | "setContract"
      | "supportsInterface"
      | "typeAddresses"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ALLOWLIST_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_WALLET_ORACLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_WALLET_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HD_KEY_DERIVER_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIT_TOKEN_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MULTI_SENDER_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PKP_HELPER_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PKP_NFT_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PKP_NFT_METADATA_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PKP_PERMISSIONS_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PUB_KEY_ROUTER_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RATE_LIMIT_NFT_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RELEASE_REGISTER_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKING_BALANCES_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKING_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAllowedEnv",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContract",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAllowedEnv",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setContract",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "typeAddresses",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ALLOWLIST_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_WALLET_ORACLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_WALLET_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HD_KEY_DERIVER_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIT_TOKEN_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MULTI_SENDER_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PKP_HELPER_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PKP_NFT_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PKP_NFT_METADATA_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PKP_PERMISSIONS_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PUB_KEY_ROUTER_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RATE_LIMIT_NFT_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RELEASE_REGISTER_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKING_BALANCES_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKING_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAllowedEnv",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAllowedEnv",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "typeAddresses",
    data: BytesLike
  ): Result;

  events: {
    "AllowedEnvAdded(uint8)": EventFragment;
    "AllowedEnvRemoved(uint8)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SetContract(bytes32,uint8,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllowedEnvAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllowedEnvRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetContract"): EventFragment;
}

export interface AllowedEnvAddedEventObject {
  env: number;
}
export type AllowedEnvAddedEvent = TypedEvent<
  [number],
  AllowedEnvAddedEventObject
>;

export type AllowedEnvAddedEventFilter = TypedEventFilter<AllowedEnvAddedEvent>;

export interface AllowedEnvRemovedEventObject {
  env: number;
}
export type AllowedEnvRemovedEvent = TypedEvent<
  [number],
  AllowedEnvRemovedEventObject
>;

export type AllowedEnvRemovedEventFilter =
  TypedEventFilter<AllowedEnvRemovedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SetContractEventObject {
  typ: string;
  env: number;
  addr: string;
}
export type SetContractEvent = TypedEvent<
  [string, number, string],
  SetContractEventObject
>;

export type SetContractEventFilter = TypedEventFilter<SetContractEvent>;

export interface Resolver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ResolverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    ALLOWLIST_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_WALLET_ORACLE(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_WALLET_REGISTRY(overrides?: CallOverrides): Promise<[string]>;

    HD_KEY_DERIVER_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    LIT_TOKEN_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    MULTI_SENDER_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    PKP_HELPER_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    PKP_NFT_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    PKP_NFT_METADATA_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    PKP_PERMISSIONS_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    PUB_KEY_ROUTER_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    RATE_LIMIT_NFT_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    RELEASE_REGISTER_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    STAKING_BALANCES_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    STAKING_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    addAllowedEnv(
      env: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getContract(
      typ: BytesLike,
      env: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeAllowedEnv(
      env: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setContract(
      typ: BytesLike,
      env: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    typeAddresses(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  ALLOWLIST_CONTRACT(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DOMAIN_WALLET_ORACLE(overrides?: CallOverrides): Promise<string>;

  DOMAIN_WALLET_REGISTRY(overrides?: CallOverrides): Promise<string>;

  HD_KEY_DERIVER_CONTRACT(overrides?: CallOverrides): Promise<string>;

  LIT_TOKEN_CONTRACT(overrides?: CallOverrides): Promise<string>;

  MULTI_SENDER_CONTRACT(overrides?: CallOverrides): Promise<string>;

  PKP_HELPER_CONTRACT(overrides?: CallOverrides): Promise<string>;

  PKP_NFT_CONTRACT(overrides?: CallOverrides): Promise<string>;

  PKP_NFT_METADATA_CONTRACT(overrides?: CallOverrides): Promise<string>;

  PKP_PERMISSIONS_CONTRACT(overrides?: CallOverrides): Promise<string>;

  PUB_KEY_ROUTER_CONTRACT(overrides?: CallOverrides): Promise<string>;

  RATE_LIMIT_NFT_CONTRACT(overrides?: CallOverrides): Promise<string>;

  RELEASE_REGISTER_CONTRACT(overrides?: CallOverrides): Promise<string>;

  STAKING_BALANCES_CONTRACT(overrides?: CallOverrides): Promise<string>;

  STAKING_CONTRACT(overrides?: CallOverrides): Promise<string>;

  addAllowedEnv(
    env: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getContract(
    typ: BytesLike,
    env: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeAllowedEnv(
    env: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAdmin(
    newAdmin: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setContract(
    typ: BytesLike,
    env: BigNumberish,
    addr: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  typeAddresses(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    ALLOWLIST_CONTRACT(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DOMAIN_WALLET_ORACLE(overrides?: CallOverrides): Promise<string>;

    DOMAIN_WALLET_REGISTRY(overrides?: CallOverrides): Promise<string>;

    HD_KEY_DERIVER_CONTRACT(overrides?: CallOverrides): Promise<string>;

    LIT_TOKEN_CONTRACT(overrides?: CallOverrides): Promise<string>;

    MULTI_SENDER_CONTRACT(overrides?: CallOverrides): Promise<string>;

    PKP_HELPER_CONTRACT(overrides?: CallOverrides): Promise<string>;

    PKP_NFT_CONTRACT(overrides?: CallOverrides): Promise<string>;

    PKP_NFT_METADATA_CONTRACT(overrides?: CallOverrides): Promise<string>;

    PKP_PERMISSIONS_CONTRACT(overrides?: CallOverrides): Promise<string>;

    PUB_KEY_ROUTER_CONTRACT(overrides?: CallOverrides): Promise<string>;

    RATE_LIMIT_NFT_CONTRACT(overrides?: CallOverrides): Promise<string>;

    RELEASE_REGISTER_CONTRACT(overrides?: CallOverrides): Promise<string>;

    STAKING_BALANCES_CONTRACT(overrides?: CallOverrides): Promise<string>;

    STAKING_CONTRACT(overrides?: CallOverrides): Promise<string>;

    addAllowedEnv(env: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getContract(
      typ: BytesLike,
      env: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeAllowedEnv(
      env: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(newAdmin: string, overrides?: CallOverrides): Promise<void>;

    setContract(
      typ: BytesLike,
      env: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    typeAddresses(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "AllowedEnvAdded(uint8)"(env?: null): AllowedEnvAddedEventFilter;
    AllowedEnvAdded(env?: null): AllowedEnvAddedEventFilter;

    "AllowedEnvRemoved(uint8)"(env?: null): AllowedEnvRemovedEventFilter;
    AllowedEnvRemoved(env?: null): AllowedEnvRemovedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "SetContract(bytes32,uint8,address)"(
      typ?: null,
      env?: null,
      addr?: null
    ): SetContractEventFilter;
    SetContract(typ?: null, env?: null, addr?: null): SetContractEventFilter;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    ALLOWLIST_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_WALLET_ORACLE(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_WALLET_REGISTRY(overrides?: CallOverrides): Promise<BigNumber>;

    HD_KEY_DERIVER_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    LIT_TOKEN_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    MULTI_SENDER_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    PKP_HELPER_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    PKP_NFT_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    PKP_NFT_METADATA_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    PKP_PERMISSIONS_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    PUB_KEY_ROUTER_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    RATE_LIMIT_NFT_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    RELEASE_REGISTER_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    STAKING_BALANCES_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    STAKING_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    addAllowedEnv(
      env: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getContract(
      typ: BytesLike,
      env: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeAllowedEnv(
      env: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setContract(
      typ: BytesLike,
      env: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    typeAddresses(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ALLOWLIST_CONTRACT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_WALLET_ORACLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_WALLET_REGISTRY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    HD_KEY_DERIVER_CONTRACT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIT_TOKEN_CONTRACT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MULTI_SENDER_CONTRACT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PKP_HELPER_CONTRACT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PKP_NFT_CONTRACT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PKP_NFT_METADATA_CONTRACT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PKP_PERMISSIONS_CONTRACT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PUB_KEY_ROUTER_CONTRACT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RATE_LIMIT_NFT_CONTRACT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RELEASE_REGISTER_CONTRACT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    STAKING_BALANCES_CONTRACT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    STAKING_CONTRACT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAllowedEnv(
      env: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getContract(
      typ: BytesLike,
      env: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAllowedEnv(
      env: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setContract(
      typ: BytesLike,
      env: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    typeAddresses(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
